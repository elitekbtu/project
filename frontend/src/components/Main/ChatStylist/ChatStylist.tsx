import { useState, useRef, useEffect, useContext } from 'react'
import { Link } from 'react-router-dom'
import { 
  sendChatMessage, 
  resetConversation,
  getConversationStats,
  type ChatStylistItem,
  type ChatStylistResponse 
} from '../../../api/chatStylist'
import { Input } from '../../ui/input'
import { Button } from '../../ui/button'
import { Avatar, AvatarFallback } from '../../ui/avatar'
import { Badge } from '../../ui/badge'
import { 
  MessageCircle, 
  User, 
  Bot, 
  X, 
  ShoppingBag, 
  RefreshCw, 
  BarChart3,
  Zap,
  Clock,
  Target,
  ExternalLink,
  ShoppingCart,
  ChevronDown,
  ChevronUp
} from 'lucide-react'
import { AuthContext } from '../../../context/AuthContext'
import { useCart } from '../../../context/CartContext'

const AVATAR_AI = <AvatarFallback className="bg-muted text-muted-foreground"><Bot className="w-5 h-5" /></AvatarFallback>
const AVATAR_USER = <AvatarFallback className="bg-muted text-muted-foreground"><User className="w-5 h-5" /></AvatarFallback>

interface ChatMessage {
  role: 'user' | 'ai'
  text: string
  items?: ChatStylistItem[]
  intent_type?: string
  confidence?: number
  processing_time?: number
}

const ChatStylist = () => {
  // –ö–ª—é—á –¥–ª—è sessionStorage
  const SESSION_KEY = 'chat_stylist_history'
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ sessionStorage –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  const [messages, setMessages] = useState<ChatMessage[]>(() => {
    try {
      const stored = sessionStorage.getItem(SESSION_KEY)
      return stored ? (JSON.parse(stored) as ChatMessage[]) : []
    } catch {
      return []
    }
  })
  const [input, setInput] = useState('')
  const [loading, setLoading] = useState(false)
  const [open, setOpen] = useState(false)
  const [showStats, setShowStats] = useState(false)
  const [stats, setStats] = useState<any>(null)
  const [loadingStats, setLoadingStats] = useState(false)
  const [expandedItems, setExpandedItems] = useState<Set<number>>(new Set())
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const auth = useContext(AuthContext)
  const user = auth && typeof auth === 'object' && auth !== null && 'user' in auth ? (auth as any).user : undefined;
  const { addItem } = useCart()

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ sessionStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    sessionStorage.setItem(SESSION_KEY, JSON.stringify(messages))
  }, [messages])

  useEffect(() => {
    if (open && messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' })
    }
  }, [messages, open])

  const handleSend = async () => {
    if (!input.trim()) return
    setMessages([...messages, { role: 'user', text: input }])
    setLoading(true)
    
    try {
      const resp: ChatStylistResponse = await sendChatMessage(input, user)
      
      // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö
      if (resp.items && resp.items.length > 0) {
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${resp.items.length} —Ç–æ–≤–∞—Ä–æ–≤ –≤ —á–∞—Ç-—Å—Ç–∏–ª–∏—Å—Ç–µ`)
      }
      
      // –ü–∞—Ä—Å–∏–º —Å–æ–≤–µ—Ç –ø–æ —Ä–∞–∑–º–µ—Ä—É, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      let reply = resp.reply
      let sizeAdvice = ''
      const sizeMatch = reply.match(/–°–æ–≤–µ—Ç –ø–æ —Ä–∞–∑–º–µ—Ä—É:([^\n]+)/i)
      if (sizeMatch) {
        sizeAdvice = sizeMatch[1].trim()
        reply = reply.replace(sizeMatch[0], '').trim()
      }
      
      const aiMessage: ChatMessage = {
        role: 'ai',
        text: reply + (sizeAdvice ? `\n\nüëï –°–æ–≤–µ—Ç –ø–æ —Ä–∞–∑–º–µ—Ä—É: ${sizeAdvice}` : ''),
        items: resp.items,
        intent_type: resp.intent_type,
        confidence: resp.confidence,
        processing_time: resp.processing_time
      }
      
      setMessages(msgs => [...msgs, aiMessage])
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
      setMessages(msgs => [...msgs, { 
        role: 'ai', 
        text: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.' 
      }])
    } finally {
      setInput('')
      setLoading(false)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞
  const handleClearChat = async () => {
    try {
      if (user?.id) {
        await resetConversation(user.id)
      }
      setMessages([])
      sessionStorage.removeItem(SESSION_KEY)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –¥–∏–∞–ª–æ–≥–∞:', error)
      // Fallback - –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      setMessages([])
      sessionStorage.removeItem(SESSION_KEY)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const loadStats = async () => {
    if (!user?.id) return
    
    setLoadingStats(true)
    try {
      const statsData = await getConversationStats(user.id)
      setStats(statsData)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error)
    } finally {
      setLoadingStats(false)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
  const handleAddToCart = async (item: ChatStylistItem) => {
    try {
      await addItem({
        id: item.id,
        item_id: item.id,
        name: item.name || '–¢–æ–≤–∞—Ä',
        price: item.price || 0,
        image_url: item.image_url,
        quantity: 1,
      })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:', error)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
  const toggleExpandedItems = (messageIndex: number) => {
    setExpandedItems(prev => {
      const newSet = new Set(prev)
      if (newSet.has(messageIndex)) {
        newSet.delete(messageIndex)
      } else {
        newSet.add(messageIndex)
      }
      return newSet
    })
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
  const renderMessageMetadata = (message: ChatMessage) => {
    if (message.role !== 'ai' || !message.intent_type) return null

    return (
      <div className="flex items-center gap-2 mt-2 text-xs text-muted-foreground">
        {message.intent_type && (
          <Badge variant="outline" className="text-xs">
            <Target className="w-3 h-3 mr-1" />
            {message.intent_type}
          </Badge>
        )}
        {message.confidence && (
          <Badge variant="outline" className="text-xs">
            <Zap className="w-3 h-3 mr-1" />
            {Math.round(message.confidence * 100)}%
          </Badge>
        )}
        {message.processing_time && (
          <Badge variant="outline" className="text-xs">
            <Clock className="w-3 h-3 mr-1" />
            {message.processing_time.toFixed(2)}s
          </Badge>
        )}
      </div>
    )
  }

  if (!open) {
    return (
      <Button
        variant="outline"
        size="icon"
        className="fixed bottom-6 right-6 z-40 shadow-md border bg-white md:bottom-6 md:right-6 bottom-[80px] right-6 md:bottom-6 sm:bottom-6 lg:bottom-6 xl:bottom-6"
        onClick={() => setOpen(true)}
        aria-label="–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç-—Å—Ç–∏–ª–∏—Å—Ç"
      >
        <MessageCircle className="w-6 h-6 text-muted-foreground" />
      </Button>
    )
  }

  return (
    <div className="fixed bottom-0 right-0 z-40 w-full max-w-md sm:max-w-sm md:max-w-md lg:max-w-lg xl:max-w-xl h-[45vh] sm:h-[55vh] md:h-[65vh] lg:h-[75vh] xl:h-[80vh] bg-white border border-slate-200 rounded-2xl shadow-xl flex flex-col animate-fade-in md:bottom-0 md:mb-0 mb-[60px] md:mb-0">
      {/* Header */}
      <div className="flex items-center justify-between px-4 py-3 border-b border-slate-200 bg-white rounded-t-2xl">
        <span className="text-base font-semibold text-foreground">–ò–ò —á–∞—Ç-—Å—Ç–∏–ª–∏—Å—Ç</span>
        <div className="flex gap-1">
          <Button 
            variant="ghost" 
            size="icon" 
            onClick={() => {
              setShowStats(!showStats)
              if (!showStats && !stats) {
                loadStats()
              }
            }} 
            className="text-muted-foreground" 
            title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
          >
            <BarChart3 className="w-4 h-4" />
          </Button>
          <Button variant="ghost" size="icon" onClick={handleClearChat} className="text-muted-foreground" title="–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç">
            <RefreshCw className="w-4 h-4" />
          </Button>
          <Button variant="ghost" size="icon" onClick={() => setOpen(false)} className="text-muted-foreground">
            <X className="w-5 h-5" />
          </Button>
        </div>
      </div>

      {/* Statistics Panel */}
      {showStats && (
        <div className="px-4 py-3 border-b border-slate-200 bg-slate-50">
          {loadingStats ? (
            <div className="flex items-center gap-2 text-sm text-muted-foreground">
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-primary"></div>
              –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...
            </div>
          ) : stats ? (
            <div className="space-y-2">
              <div className="flex items-center justify-between text-sm">
                <span className="text-muted-foreground">–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π:</span>
                <span className="font-medium">{stats.interaction_count || 0}</span>
              </div>
              {stats.current_state && (
                <div className="flex items-center justify-between text-sm">
                  <span className="text-muted-foreground">–°–æ—Å—Ç–æ—è–Ω–∏–µ:</span>
                  <Badge variant="outline" className="text-xs">
                    {stats.current_state}
                  </Badge>
                </div>
              )}
              {stats.conversation_duration && (
                <div className="flex items-center justify-between text-sm">
                  <span className="text-muted-foreground">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</span>
                  <span className="font-medium">{Math.round(stats.conversation_duration)}—Å</span>
                </div>
              )}
            </div>
          ) : (
            <div className="text-sm text-muted-foreground">
              –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
            </div>
          )}
        </div>
      )}

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.length === 0 ? (
          <div className="text-center text-muted-foreground py-8">
            <Bot className="w-12 h-12 mx-auto mb-4 opacity-50" />
            <p className="text-sm">–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ò–ò-—Å—Ç–∏–ª–∏—Å—Ç. –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –º–æ–¥–µ, —Å—Ç–∏–ª–µ –∏–ª–∏ —Ç–æ–≤–∞—Ä–∞—Ö!</p>
          </div>
        ) : (
          messages.map((message, index) => (
            <div key={index} className={`flex gap-3 ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}>
              {message.role === 'ai' && (
                <Avatar className="w-8 h-8">
                  {AVATAR_AI}
                </Avatar>
              )}
              <div className={`max-w-[80%] ${message.role === 'user' ? 'order-2' : 'order-1'}`}>
                <div className={`rounded-lg px-3 py-2 ${
                  message.role === 'user' 
                    ? 'bg-primary text-primary-foreground' 
                    : 'bg-muted'
                }`}>
                  <p className="text-sm whitespace-pre-wrap">{message.text}</p>
                </div>
                
                {/* –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è */}
                {renderMessageMetadata(message)}
                
                {/* –¢–æ–≤–∞—Ä—ã */}
                {message.items && message.items.length > 0 && (
                  <div className="mt-3 space-y-2">
                    <p className="text-xs text-muted-foreground">–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã: ({message.items.length})</p>
                    <div className="grid grid-cols-1 gap-2 max-w-full">
                      {message.items.slice(0, expandedItems.has(index) ? message.items.length : 3).map((item) => (
                        <div 
                          key={item.id} 
                          className="flex items-center gap-2 p-2 bg-white border rounded-lg hover:bg-gray-50 transition-colors overflow-hidden"
                        >
                          <Link 
                            to={`/items/${item.id}`}
                            className="flex items-center gap-2 flex-1 min-w-0"
                          >
                            {item.image_url ? (
                              <img 
                                src={item.image_url} 
                                alt={item.name || '–¢–æ–≤–∞—Ä'} 
                                className="w-10 h-10 sm:w-12 sm:h-12 object-cover rounded flex-shrink-0"
                                onError={(e) => {
                                  e.currentTarget.style.display = 'none'
                                }}
                              />
                            ) : (
                              <div className="w-10 h-10 sm:w-12 sm:h-12 bg-gray-200 rounded flex items-center justify-center flex-shrink-0">
                                <ShoppingBag className="w-5 h-5 sm:w-6 sm:h-6 text-gray-400" />
                              </div>
                            )}
                            <div className="flex-1 min-w-0">
                              <p className="text-sm font-medium truncate text-gray-900">
                                {item.name || '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
                              </p>
                              <p className="text-xs text-muted-foreground truncate">
                                {item.brand && `${item.brand} ‚Ä¢ `}
                                {item.price ? `${item.price} ‚Ç∏` : '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
                              </p>
                            </div>
                            <ExternalLink className="w-3.5 h-3.5 sm:w-4 sm:h-4 text-muted-foreground flex-shrink-0" />
                          </Link>
                          <Button
                            variant="ghost"
                            size="icon"
                            className="h-7 w-7 sm:h-8 sm:w-8 text-green-600 hover:text-green-700 hover:bg-green-50 flex-shrink-0"
                            onClick={() => handleAddToCart(item)}
                            title="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"
                          >
                            <ShoppingCart className="w-3.5 h-3.5 sm:w-4 sm:h-4" />
                          </Button>
                        </div>
                      ))}
                    </div>
                    
                    {/* –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ" */}
                    {message.items.length > 3 && (
                      <Button
                        variant="ghost"
                        size="sm"
                        className="w-full text-xs text-muted-foreground hover:text-foreground"
                        onClick={() => toggleExpandedItems(index)}
                      >
                        {expandedItems.has(index) ? (
                          <>
                            <ChevronUp className="w-3 h-3 mr-1" />
                            –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—å—à–µ
                          </>
                        ) : (
                          <>
                            <ChevronDown className="w-3 h-3 mr-1" />
                            –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ {message.items.length - 3} —Ç–æ–≤–∞—Ä–æ–≤
                          </>
                        )}
                      </Button>
                    )}
                  </div>
                )}
              </div>
              {message.role === 'user' && (
                <Avatar className="w-8 h-8">
                  {AVATAR_USER}
                </Avatar>
              )}
            </div>
          ))
        )}
        <div ref={messagesEndRef} />
      </div>

      {/* Input */}
      <div className="p-4 border-t border-slate-200">
        <div className="flex gap-2">
          <Input
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && handleSend()}
            placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
            disabled={loading}
            className="flex-1"
          />
          <Button onClick={handleSend} disabled={loading || !input.trim()}>
            {loading ? (
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
            ) : (
              <MessageCircle className="w-4 h-4" />
            )}
          </Button>
        </div>
      </div>
    </div>
  )
}

export default ChatStylist 