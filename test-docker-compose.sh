#!/bin/bash

# üß™ –°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–º–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ Docker Compose

echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–º–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ Docker Compose"
echo "================================================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."

if ! command -v docker &> /dev/null; then
    error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    exit 1
fi

if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
    error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    exit 1
fi

success "Docker –∏ Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ .env —Ñ–∞–π–ª–∞
if [ ! -f "docker-test.env" ]; then
    error "–§–∞–π–ª docker-test.env –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    exit 1
fi

log "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ .env —Ñ–∞–π–ª–∞..."
cp docker-test.env .env
success ".env —Ñ–∞–π–ª –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω"

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose down -v --remove-orphans 2>/dev/null || docker compose down -v --remove-orphans 2>/dev/null

# –û—á–∏—Å—Ç–∫–∞ old images –∏ volumes –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
log "–û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤..."
docker system prune -f

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
check_service() {
    local service_name=$1
    local max_attempts=30
    local attempt=1
    
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞ $service_name..."
    
    while [ $attempt -le $max_attempts ]; do
        if docker-compose ps $service_name 2>/dev/null | grep -q "Up" || docker compose ps $service_name 2>/dev/null | grep -q "running"; then
            success "–°–µ—Ä–≤–∏—Å $service_name –∑–∞–ø—É—â–µ–Ω"
            return 0
        fi
        
        echo -n "."
        sleep 2
        ((attempt++))
    done
    
    error "–°–µ—Ä–≤–∏—Å $service_name –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ $((max_attempts * 2)) —Å–µ–∫—É–Ω–¥"
    return 1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è API
check_api_health() {
    local max_attempts=30
    local attempt=1
    
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API..."
    
    while [ $attempt -le $max_attempts ]; do
        if curl -f -s http://localhost:8000/api/health >/dev/null 2>&1; then
            success "API –∑–¥–æ—Ä–æ–≤ –∏ –æ—Ç–≤–µ—á–∞–µ—Ç"
            return 0
        fi
        
        echo -n "."
        sleep 3
        ((attempt++))
    done
    
    error "API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ $((max_attempts * 3)) —Å–µ–∫—É–Ω–¥"
    return 1
}

# –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
log "–°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
if command -v docker-compose &> /dev/null; then
    docker-compose up -d --build
else
    docker compose up -d --build
fi

if [ $? -ne 0 ]; then
    error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Docker Compose"
    exit 1
fi

success "Docker Compose –∑–∞–ø—É—â–µ–Ω"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
check_service "db"
if [ $? -ne 0 ]; then
    error "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å"
    docker-compose logs db 2>/dev/null || docker compose logs db
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
check_service "redis"
if [ $? -ne 0 ]; then
    warning "Redis –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º RabbitMQ
check_service "rabbitmq"
if [ $? -ne 0 ]; then
    warning "RabbitMQ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
fi

# –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
log "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π..."
sleep 10

# –ü—Ä–æ–≤–µ—Ä—è–µ–º backend
check_service "backend"
if [ $? -ne 0 ]; then
    error "Backend –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
    echo "–õ–æ–≥–∏ backend:"
    docker-compose logs backend 2>/dev/null || docker compose logs backend
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ API
check_api_health
if [ $? -ne 0 ]; then
    error "API –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è"
    echo "–õ–æ–≥–∏ backend:"
    docker-compose logs backend 2>/dev/null || docker compose logs backend
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º frontend
check_service "frontend"
if [ $? -ne 0 ]; then
    warning "Frontend –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
    echo "–õ–æ–≥–∏ frontend:"
    docker-compose logs frontend 2>/dev/null || docker compose logs frontend
fi

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints
log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints..."

# –¢–µ—Å—Ç health endpoint
if curl -f -s http://localhost:8000/api/health | grep -q "healthy"; then
    success "Health endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    error "Health endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
fi

# –¢–µ—Å—Ç API docs
if curl -f -s http://localhost:8000/docs >/dev/null 2>&1; then
    success "API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞"
else
    warning "API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π uploads
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã uploads..."
if command -v docker-compose &> /dev/null; then
    docker-compose exec -T backend ls -la uploads/ 2>/dev/null
else
    docker compose exec -T backend ls -la uploads/ 2>/dev/null
fi

# –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
log "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö:"
if command -v docker-compose &> /dev/null; then
    docker-compose ps
else
    docker compose ps
fi

echo ""
success "üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker Compose –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo ""
echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
echo "  üåê Frontend: http://localhost (—á–µ—Ä–µ–∑ nginx)"
echo "  üîß Backend API: http://localhost:8000"
echo "  üìö API Docs: http://localhost:8000/docs"
echo "  üóÑÔ∏è  Database: localhost:5432"
echo "  üê∞ RabbitMQ Management: http://localhost:15672 (guest/guest)"
echo ""
echo "üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–º–µ—Ä–∫–∏:"
echo "  1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ http://localhost"
echo "  2. –°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ"
echo "  3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ '–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞–∑'"
echo "  4. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ '–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–∫–∞'"
echo "  5. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–µ —Ñ–æ—Ç–æ –∏ –¥–æ–±–∞–≤—å—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–¥–µ–∂–¥—ã"
echo ""
echo "üîÑ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: docker-compose down -v"
echo "üìã –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤: docker-compose logs [service_name]"

# Cleanup —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
cleanup() {
    log "–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤..."
    rm -f .env
    success "Cleanup –∑–∞–≤–µ—Ä—à–µ–Ω"
}

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º cleanup —Ñ—É–Ω–∫—Ü–∏—é
trap cleanup EXIT 