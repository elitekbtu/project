import replicate
import asyncio
import httpx
from typing import List, Dict, Any, Optional
from pathlib import Path
import os
import logging

from app.core.config import get_settings

logger = logging.getLogger(__name__)

settings = get_settings()

class VirtualTryOnService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–º–µ—Ä–∫–∏ –æ–¥–µ–∂–¥—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º replicate API"""
    
    def __init__(self):
        self.replicate_api_key = os.getenv("REPLICATE_API_TOKEN")
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –º–æ–¥–µ–ª–∏
        self.model_id = "cuuupid/idm-vton:latest"
        self.fallback_model_id = "cuuupid/idm-vton:0513734a452173b8173e907e3a59d19a36266e55b48528559432bd21c7d7e985"
        self.output_path = Path("uploads/virtual_tryon")
        self.output_path.mkdir(parents=True, exist_ok=True)
        
        if not self.replicate_api_key:
            logger.warning("REPLICATE_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–∫–∞ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        elif self.replicate_api_key == "r8_test_token":
            logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π REPLICATE_API_TOKEN. –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–∫–∞ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            self.replicate_api_key = None
    
    async def generate_virtual_tryon_outfit(
        self,
        human_image_url: str,
        outfit_items: List[Dict[str, Any]],
        user_measurements: Optional[Dict[str, float]] = None
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –ø—Ä–∏–º–µ—Ä–∫—É –æ–±—Ä–∞–∑–∞, –ø—Ä–∏–º–µ–Ω—è—è –ø–æ –æ–¥–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        
        Args:
            human_image_url: URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞
            outfit_items: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–¥–µ–∂–¥—ã —Å –∏—Ö –¥–∞–Ω–Ω—ã–º–∏
            user_measurements: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            URL –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–º–µ—Ä–∫–æ–π
        """
        
        if not self.replicate_api_key:
            logger.warning("Replicate API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞—é –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return human_image_url
        
        try:
            logger.info(f"üéØ –ù–∞—á–∏–Ω–∞—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –ø—Ä–∏–º–µ—Ä–∫—É –¥–ª—è {len(outfit_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            logger.info(f"üìä –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {human_image_url}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É –Ω–∞–Ω–µ—Å–µ–Ω–∏—è –∏ –±–µ—Ä–µ–º –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            ordered_items = self._sort_items_by_layer_order(outfit_items)
            
            if not ordered_items:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞—é –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                return human_image_url
            
            current_image = human_image_url
            
            # –¶–∏–∫–ª–∏—á–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –æ–¥–µ–∂–¥—ã
            for i, item in enumerate(ordered_items):
                logger.info(f"üîÑ –®–∞–≥ {i+1}/{len(ordered_items)}: –ü—Ä–∏–º–µ–Ω—è—é {item['name']} ({item['category']})")
                logger.info(f"   üì∏ –¢–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {current_image}")
                
                try:
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –ø—Ä–∏–º–µ—Ä–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                    current_image = await self._apply_single_garment(
                        human_image=current_image,
                        garment_item=item,
                        step_number=i+1,
                        total_steps=len(ordered_items)
                    )
                    
                    logger.info(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —à–∞–≥–∞ {i+1}: {current_image}")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await asyncio.sleep(2)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ {item['name']}: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                    continue
            
            logger.info(f"‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {current_image}")
            logger.info(f"üìà –ü—Ä–∏–º–µ–Ω–µ–Ω–æ {len(ordered_items)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ {len(outfit_items)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
            return current_image
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–º–µ—Ä–∫–∏: {e}")
            return human_image_url
    
    def _sort_items_by_layer_order(self, items: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–°–æ—Ä—Ç–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É –Ω–∞–Ω–µ—Å–µ–Ω–∏—è (—Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö) –∏ –±–µ—Ä–µ—Ç –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—á–µ–º –º–µ–Ω—å—à–µ —á–∏—Å–ª–æ, —Ç–µ–º —Ä–∞–Ω—å—à–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è)
        category_priority = {
            "bottom": 1,    # –°–Ω–∞—á–∞–ª–∞ –Ω–∏–∑
            "top": 2,       # –ü–æ—Ç–æ–º –≤–µ—Ä—Ö
            "footwear": 3,  # –û–±—É–≤—å
            "accessory": 4, # –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã
            "fragrance": 5  # –ê—Ä–æ–º–∞—Ç—ã (–Ω–µ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –≤ –ø—Ä–∏–º–µ—Ä–∫–µ)
        }
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ—Ä–∏—Ç—å
        wearable_items = []
        for item in items:
            if (item.get("image_url") and 
                item.get("category") in category_priority and 
                item.get("category") != "fragrance"):  # –ê—Ä–æ–º–∞—Ç—ã –Ω–µ –ø—Ä–∏–º–µ—Ä—è–µ–º
                wearable_items.append(item)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –±–µ—Ä–µ–º –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ –∫–∞–∂–¥–æ–π
        items_by_category = {}
        for item in wearable_items:
            category = item.get("category", "")
            if category not in items_by_category:
                items_by_category[category] = []
            items_by_category[category].append(item)
        
        # –ë–µ—Ä–µ–º –ø–æ –æ–¥–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π)
        selected_items = []
        for category, priority in sorted(category_priority.items(), key=lambda x: x[1]):
            if category in items_by_category and items_by_category[category]:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                selected_items.append(items_by_category[category][0])
        
        logger.info(f"üéØ –í—ã–±—Ä–∞–Ω–æ {len(selected_items)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ {len(wearable_items)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
        for item in selected_items:
            logger.info(f"   - {item.get('name', 'Unknown')} ({item.get('category', 'Unknown')})")
        
        return selected_items
    
    async def _apply_single_garment(
        self,
        human_image: str,
        garment_item: Dict[str, Any],
        step_number: int,
        total_steps: int
    ) -> str:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ–¥–Ω—É –≤–µ—â—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —á–µ–ª–æ–≤–µ–∫–∞"""
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–µ–∂–¥—ã
            garment_image_url = garment_item.get("image_url", "")
            if not self._is_valid_image_url(garment_image_url):
                logger.warning(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è {garment_item.get('name', 'Unknown')}: {garment_image_url}")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-—Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                return self._generate_mock_result(step_number, garment_item)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –≤ –ø–æ–ª–Ω—ã–π URL –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if garment_image_url.startswith('/uploads/'):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–º–µ–Ω –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                from app.core.config import get_settings
                settings = get_settings()
                domain = "https://trc.works"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω
                full_garment_url = f"{domain}{garment_image_url}"
                logger.info(f"üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å: {garment_image_url} ‚Üí {full_garment_url}")
            else:
                full_garment_url = garment_image_url
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è replicate API
            category = self._map_category_to_replicate(garment_item.get("category"))
            
            # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤–µ—â–∏
            garment_description = self._create_garment_description(garment_item)
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è replicate API
            input_params = {
                "human_img": human_image,
                "garm_img": full_garment_url,
                "garment_des": garment_description,
                "category": category,
                "crop": True,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–æ–ø–ø–∏–Ω–≥ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                "steps": 30,   # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                "seed": 42,    # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
                "force_dc": category == "dresses"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º DressCode –¥–ª—è –ø–ª–∞—Ç—å–µ–≤
            }
            
            logger.info(f"üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è replicate: {input_params}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ replicate API
            output = await self._run_replicate_async(input_params)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_url = await self._save_replicate_output(output, step_number, garment_item)
            
            logger.info(f"‚úÖ –®–∞–≥ {step_number}/{total_steps} –∑–∞–≤–µ—Ä—à–µ–Ω: {result_url}")
            return result_url
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤–µ—â–∏ {garment_item.get('name', 'Unknown')}: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-—Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return self._generate_mock_result(step_number, garment_item)
    
    def _is_valid_image_url(self, url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not url:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ HTTP/HTTPS URL –∏–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
        if url.startswith(('http://', 'https://')):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
            if 'unsplash.com' in url and 'photo-1507003211169-0a1dd7228f2d' in url:
                return False
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
        if url.startswith('/uploads/'):
            return True
        
        return False
    
    def _generate_mock_result(self, step_number: int, item: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ–∫-—Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ
            timestamp = int(asyncio.get_event_loop().time())
            item_name = item.get("name", "unknown").replace(" ", "_")[:20]
            filename = f"mock_tryon_step_{step_number}_{item_name}_{timestamp}.jpg"
            filepath = self.output_path / filename
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –º–æ–∫-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é)
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º URL —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–∫-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            mock_url = f"/uploads/virtual_tryon/{filename}"
            
            logger.info(f"üé≠ –°–æ–∑–¥–∞–Ω –º–æ–∫-—Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {item.get('name', 'Unknown')}: {mock_url}")
            return mock_url
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            return "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=600&fit=crop&crop=face"
    
    def _map_category_to_replicate(self, category: str) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ replicate API"""
        
        mapping = {
            "top": "upper_body",
            "bottom": "lower_body", 
            "footwear": "lower_body",  # –û–±—É–≤—å —Ç–æ–∂–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏
            "accessory": "upper_body",  # –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏
            "fragrance": "upper_body"   # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–∏–º–µ—Ä–∫–µ
        }
        
        return mapping.get(category, "upper_body")
    
    def _create_garment_description(self, item: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤–µ—â–∏ –¥–ª—è replicate API"""
        
        parts = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if item.get("name"):
            parts.append(item["name"])
        
        if item.get("color"):
            parts.append(f"{item['color']} color")
        
        if item.get("brand"):
            parts.append(f"by {item['brand']}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –≤–µ—â–∏
        category_descriptions = {
            "top": "shirt, blouse, sweater, jacket",
            "bottom": "pants, skirt, shorts, jeans",
            "footwear": "shoes, boots, sneakers",
            "accessory": "accessory, jewelry, belt"
        }
        
        category = item.get("category", "")
        if category in category_descriptions:
            parts.append(category_descriptions[category])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if item.get("description"):
            parts.append(item["description"])
        
        description = ", ".join(parts)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è
        if len(description) > 200:
            description = description[:197] + "..."
        
        return description or "clothing item"
    
    async def _run_replicate_async(self, input_params: Dict[str, Any]) -> Any:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ replicate API"""
        
        def run_replicate(model_id: str):
            try:
                return replicate.run(model_id, input=input_params)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Replicate API —Å –º–æ–¥–µ–ª—å—é {model_id}: {e}")
                raise e
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å async loop
        loop = asyncio.get_event_loop()
        
        try:
            # –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –º–æ–¥–µ–ª—å
            logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –º–æ–¥–µ–ª—å: {self.model_id}")
            return await loop.run_in_executor(None, lambda: run_replicate(self.model_id))
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é: {e}")
            try:
                # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å
                logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å: {self.fallback_model_id}")
                return await loop.run_in_executor(None, lambda: run_replicate(self.fallback_model_id))
            except Exception as e2:
                logger.error(f"‚ùå –û–±–µ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e2}")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-—Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–º–µ—Å—Ç–æ –≤—ã–∑–æ–≤–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                logger.info("üé≠ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-—Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π")
                return "mock_result"
    
    async def _save_replicate_output(self, output: Any, step_number: int, item: Dict[str, Any]) -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ replicate API"""
        
        try:
            # –ï—Å–ª–∏ —ç—Ç–æ –º–æ–∫-—Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Å–æ–∑–¥–∞–µ–º –º–æ–∫-—Ñ–∞–π–ª
            if output == "mock_result":
                return self._generate_mock_result(step_number, item)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = int(asyncio.get_event_loop().time())
            item_name = item.get("name", "unknown").replace(" ", "_")[:20]
            filename = f"tryon_step_{step_number}_{item_name}_{timestamp}.jpg"
            filepath = self.output_path / filename
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            if hasattr(output, 'read'):
                # –ï—Å–ª–∏ output —ç—Ç–æ file-like –æ–±—ä–µ–∫—Ç
                with open(filepath, "wb") as file:
                    file.write(output.read())
            else:
                # –ï—Å–ª–∏ output —ç—Ç–æ URL, —Å–∫–∞—á–∏–≤–∞–µ–º
                async with httpx.AsyncClient() as client:
                    response = await client.get(str(output))
                    response.raise_for_status()
                    with open(filepath, "wb") as file:
                        file.write(response.content)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
            return f"/uploads/virtual_tryon/{filename}"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-—Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return self._generate_mock_result(step_number, item)

# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
virtual_tryon_service = VirtualTryOnService()