#!/usr/bin/env python3
"""
Image Generation Service

–°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–±—Ä–∞–∑–æ–≤ –º–µ—Ç–æ–¥–æ–º image-to-image:
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Hugging Face Inference API (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
- Stable Diffusion + ControlNet –¥–ª—è —Ç–æ—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
- –†–∞–±–æ—Ç–∞–µ—Ç —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –º–∞–Ω–µ–∫–µ–Ω–∞
- –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤
"""

import asyncio
import logging
import os
import base64
import io
from typing import List, Dict, Any, Optional, Tuple
from pathlib import Path
from PIL import Image, ImageDraw, ImageFont
import httpx
import aiofiles
from fastapi import HTTPException

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Hugging Face API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
HUGGINGFACE_API_KEY = os.getenv("HUGGINGFACE_API_KEY")
HUGGINGFACE_API_URL = "https://api-inference.huggingface.co/models"

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è image-to-image
MODELS = {
    "main": "stabilityai/stable-diffusion-2-1",          # –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å
    "alternative": "runwayml/stable-diffusion-v1-5",     # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å
    "inpainting": "runwayml/stable-diffusion-inpainting" # –î–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è/–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
}

class ImageGenerationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–±—Ä–∞–∑–æ–≤"""
    
    def __init__(self):
        self.api_key = HUGGINGFACE_API_KEY
        self.base_path = Path("uploads")
        self.mannequin_path = Path("frontend/public/maneken.png")
        self.items_path = Path("uploads/items")
        self.output_path = Path("uploads/generated_outfits")
        self.items_path.mkdir(parents=True, exist_ok=True)
        self.output_path.mkdir(parents=True, exist_ok=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        if not self.api_key:
            logger.warning("HUGGINGFACE_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–≥–ª—É—à–∫–∞.")
    
    async def generate_outfit_image(
        self,
        product_items: List[Dict[str, Any]],
        style_prompt: str = "",
        user_measurements: Optional[Dict[str, float]] = None
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–∑–∞ –º–µ—Ç–æ–¥–æ–º image-to-image
        
        Args:
            product_items: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏—Ö –¥–∞–Ω–Ω—ã–º–∏ –∏ –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            style_prompt: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
            user_measurements: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥–≥–æ–Ω–∫–∏
            
        Returns:
            URL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        try:
            logger.info(f"üé® –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ–±—Ä–∞–∑–∞ –¥–ª—è {len(product_items)} —Ç–æ–≤–∞—Ä–æ–≤")
            
            # –ï—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞ Hugging Face, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–∑–∏—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
            if not self.api_key:
                mannequin_image = await self._load_mannequin_image()
                product_images = await self._load_product_images(product_items)

                if not product_images:
                    # –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ ‚Äì –≤–µ—Ä–Ω—ë–º –ø—Ä–æ—Å—Ç–æ–π placeholder
                    return await self._generate_placeholder_image(product_items)

                reference_image = await self._create_reference_composition(
                    mannequin_image, product_images, product_items
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–ø–æ–∑–∏—Ü–∏—é –∫–∞–∫ –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                buffer = io.BytesIO()
                reference_image.save(buffer, format="PNG")
                image_url = await self._save_generated_image_bytes(buffer.getvalue(), product_items)
                logger.info(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–∑–∏—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {image_url}")
                return image_url
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            mannequin_image = await self._load_mannequin_image()
            product_images = await self._load_product_images(product_items)
            
            if not product_images:
                logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
                return await self._generate_placeholder_image(product_items)
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è reference
            reference_image = await self._create_reference_composition(
                mannequin_image, product_images, product_items
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            detailed_prompt = self._create_detailed_prompt(product_items, style_prompt, user_measurements)
            
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Hugging Face
                generated_image_url = await self._generate_with_huggingface(
                    reference_image, detailed_prompt, product_items
                )
                logger.info(f"‚úÖ –û–±—Ä–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {generated_image_url}")
                return generated_image_url
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Hugging Face: {e}. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–∑–∏—Ç.")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º reference_image –∫–∞–∫ –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                buffer = io.BytesIO()
                reference_image.save(buffer, format="PNG")
                image_url = await self._save_generated_image_bytes(buffer.getvalue(), product_items)
                logger.info(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–∑–∏—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ HF: {image_url}")
                return image_url
            
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–∑–∞: {e}")
            # –í —Å–∞–º–æ–º –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ —Å–æ–∑–¥–∞—ë–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π placeholder
            return await self._generate_placeholder_image(product_items)
    
    async def _load_mannequin_image(self) -> Image.Image:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞–Ω–µ–∫–µ–Ω–∞"""
        try:
            if self.mannequin_path.exists():
                async with aiofiles.open(self.mannequin_path, 'rb') as f:
                    content = await f.read()
                    return Image.open(io.BytesIO(content)).convert("RGB")
            else:
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞–Ω–µ–∫–µ–Ω–∞ –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É
                mannequin = Image.new("RGB", (512, 1024), color=(240, 240, 240))
                draw = ImageDraw.Draw(mannequin)
                
                # –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–∏–ª—É—ç—Ç –º–∞–Ω–µ–∫–µ–Ω–∞
                # –ì–æ–ª–æ–≤–∞
                draw.ellipse([200, 50, 312, 150], fill=(220, 220, 220))
                # –¢–µ–ª–æ
                draw.rectangle([180, 150, 332, 600], fill=(220, 220, 220))
                # –†—É–∫–∏
                draw.rectangle([120, 200, 180, 500], fill=(220, 220, 220))
                draw.rectangle([332, 200, 392, 500], fill=(220, 220, 220))
                # –ù–æ–≥–∏
                draw.rectangle([200, 600, 250, 950], fill=(220, 220, 220))
                draw.rectangle([262, 600, 312, 950], fill=(220, 220, 220))
                
                return mannequin
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–Ω–µ–∫–µ–Ω–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            return Image.new("RGB", (512, 1024), color=(240, 240, 240))
    
    async def _load_product_images(self, product_items: List[Dict[str, Any]]) -> List[Tuple[Image.Image, Dict[str, Any]]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤"""
        product_images = []
        
        for item in product_items:
            try:
                image_url = item.get("image_url", "")
                if not image_url:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ URL
                if image_url.startswith("/uploads/"):
                    # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª 
                    local_path = Path(image_url.lstrip("/"))
                    if local_path.exists():
                        async with aiofiles.open(local_path, 'rb') as f:
                            content = await f.read()
                            image = Image.open(io.BytesIO(content)).convert("RGB")
                            product_images.append((image, item))
                            logger.info(f"üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {item['name']}")
                    else:
                        logger.warning(f"‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {local_path}")
                else:
                    # –í–Ω–µ—à–Ω–∏–π URL - —Å–∫–∞—á–∏–≤–∞–µ–º
                    async with httpx.AsyncClient() as client:
                        response = await client.get(image_url, timeout=30)
                        if response.status_code == 200:
                            image = Image.open(io.BytesIO(response.content)).convert("RGB")
                            product_images.append((image, item))
                            logger.info(f"üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤–Ω–µ—à–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {item['name']}")
                        
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {item.get('name', 'Unknown')}: {e}")
                continue
        
        return product_images
    
    async def _create_reference_composition(
        self,
        mannequin: Image.Image,
        product_images: List[Tuple[Image.Image, Dict[str, Any]]],
        product_items: List[Dict[str, Any]]
    ) -> Image.Image:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-—á–µ—Ä—Ç—ë–∂ –¥–ª—è AI,
        —Ç–æ—á–Ω–æ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—è –æ–¥–µ–∂–¥—É –Ω–∞ –º–∞–Ω–µ–∫–µ–Ω–µ.
        """
        try:
            base_width, base_height = 512, 1024
            composition = mannequin.resize((base_width, base_height))

            # –¢–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–¥–µ–∂–¥—ã –Ω–∞ –º–∞–Ω–µ–∫–µ–Ω–µ 512x1024
            # (x_start, y_start, width, height)
            positions = {
                "top": (130, 150, 252, 300),      # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ —Ç–æ—Ä—Å–µ
                "bottom": (146, 450, 220, 450),   # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –Ω–æ–≥–∞—Ö
                "footwear": (156, 900, 200, 124),  # –í –æ–±–ª–∞—Å—Ç–∏ —Å—Ç—É–ø–Ω–µ–π
                "accessory": (30, 50, 100, 100),   # –°–±–æ–∫—É, –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
                "fragrance": (382, 50, 100, 150)  # –° –¥—Ä—É–≥–æ–≥–æ –±–æ–∫—É
            }

            for image, item in product_images:
                category = item.get("category", "accessory")
                if category in positions:
                    pos = positions[category]
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏, –≤–ø–∏—Å—ã–≤–∞—è –≤ –æ–±–ª–∞—Å—Ç—å pos
                    resized_item = image.copy()
                    resized_item.thumbnail((pos[2], pos[3]), Image.Resampling.LANCZOS)
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
                    paste_x = pos[0] + (pos[2] - resized_item.width) // 2
                    paste_y = pos[1] + (pos[3] - resized_item.height) // 2

                    # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –º–∞—Å–∫–∏ –¥–ª—è –±–æ–ª—å—à–µ–π —á–µ—Ç–∫–æ—Å—Ç–∏
                    composition.paste(resized_item, (paste_x, paste_y))

            return composition

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏: {e}")
            return mannequin
    
    def _create_detailed_prompt(
        self,
        product_items: List[Dict[str, Any]],
        style_prompt: str = "",
        user_measurements: Optional[Dict[str, float]] = None
    ) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        base_prompt = [
            "ultra-realistic photo of clothes on a white mannequin, professional studio shot, fashion catalog style,",
            "hyper-detailed, sharp focus, clean white background, photorealistic textures,",
            "perfect fit, natural shadows, 8k, no blur, no text, no watermarks."
        ]
        
        # –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
        item_descriptions = []
        colors = []
        materials = []
        brands = []
        
        for item in product_items:
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            item_desc = []
            if item.get("brand"):
                item_desc.append(item["brand"])
                brands.append(item["brand"])
            if item.get("name"):
                item_desc.append(item["name"])
            if item.get("color"):
                item_desc.append(f"in {item['color']}")
                colors.append(item["color"])
            
            category = item.get("category", "clothing")
            if item_desc:
                item_descriptions.append(f"{category}: {' '.join(item_desc)}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            if item.get("description"):
                desc_lower = item["description"].lower()
                material_keywords = ["cotton", "polyester", "wool", "silk", "denim", "leather", "suede", "knit"]
                for material in material_keywords:
                    if material in desc_lower:
                        materials.append(material)
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        full_prompt = " ".join(base_prompt)
        
        if item_descriptions:
            full_prompt += f" Outfit consists of: {', '.join(item_descriptions)}."
        
        if colors:
            unique_colors = list(set(colors))
            full_prompt += f" Color palette: {', '.join(unique_colors)}."
        
        if materials:
            unique_materials = list(set(materials))
            full_prompt += f" Materials: {', '.join(unique_materials)}."
        
        if brands:
            unique_brands = list(set(brands))
            full_prompt += f" Brands: {', '.join(unique_brands)}."
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if user_measurements:
            if user_measurements.get("height"):
                full_prompt += f" Mannequin height: {user_measurements['height']}cm."
            if user_measurements.get("weight"):
                full_prompt += f" Proportions for {user_measurements['weight']}kg."
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
        if style_prompt:
            full_prompt += f" Style: {style_prompt}."
        
        return full_prompt
    
    async def _generate_with_huggingface(
        self,
        reference_image: Image.Image,
        prompt: str,
        product_items: List[Dict[str, Any]]
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø—Ä–æ–±—É—è –æ—Å–Ω–æ–≤–Ω—É—é –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª–∏.
        """
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –º–æ–¥–µ–ª—å
            logger.info(f"üöÄ –ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥–µ–ª—å—é: {MODELS['main']}")
            return await self._try_model(MODELS['main'], reference_image, prompt, product_items)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥–µ–ª–∏ ({MODELS['main']}): {e}. –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é.")
            try:
                # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é
                logger.info(f"üöÄ –ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª—å—é: {MODELS['alternative']}")
                return await self._try_model(MODELS['alternative'], reference_image, prompt, product_items)
            except Exception as e2:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏ ({MODELS['alternative']}): {e2}")
                raise e2  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤—ã—à–µ, —á—Ç–æ–±—ã —Å—Ä–∞–±–æ—Ç–∞–ª fallback –Ω–∞ –∫–æ–º–ø–æ–∑–∏—Ç

    async def _try_model(
        self,
        model_id: str,
        reference_image: Image.Image,
        prompt: str,
        product_items: List[Dict[str, Any]]
    ) -> str:
        """–ü—ã—Ç–∞–µ—Ç—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏."""
        headers = {"Authorization": f"Bearer {self.api_key}"}
        api_url = f"{HUGGINGFACE_API_URL}/{model_id}"

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
        buffer = io.BytesIO()
        reference_image.save(buffer, format="PNG")
        img_base64 = base64.b64encode(buffer.getvalue()).decode("utf-8")

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è image-to-image
        payload = {
            "inputs": f"data:image/png;base64,{img_base64}",
            "parameters": {
                "prompt": prompt,
                "negative_prompt": "blurry, low quality, deformed, text, watermark, ugly",
                "strength": 0.85,  # –°–∏–ª–∞ –≤–ª–∏—è–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ (0.8-0.9 —Ö–æ—Ä–æ—à–æ)
                "guidance_scale": 7.5,
                "num_inference_steps": 30, # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            }
        }

        async with httpx.AsyncClient() as client:
            response = await client.post(api_url, headers=headers, json=payload, timeout=120.0)

            if response.status_code == 200:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image_bytes = response.content
                return await self._save_generated_image_bytes(image_bytes, product_items)
            else:
                error_info = response.text
                logger.error(f"–û—à–∏–±–∫–∞ API Hugging Face ({model_id}): {response.status_code} - {error_info}")
                raise HTTPException(status_code=response.status_code, detail=f"Hugging Face API error: {error_info}")
    
    async def _save_generated_image(self, image_base64: str, product_items: List[Dict[str, Any]]) -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ base64"""
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
            image_data = base64.b64decode(image_base64)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = int(asyncio.get_event_loop().time())
            filename = f"outfit_{timestamp}.png"
            filepath = self.output_path / filename
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            async with aiofiles.open(filepath, 'wb') as f:
                await f.write(image_data)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
            return f"/uploads/generated_outfits/{filename}"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return await self._generate_placeholder_image(product_items)
    
    async def _save_generated_image_bytes(self, image_data: bytes, product_items: List[Dict[str, Any]]) -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ bytes"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = int(asyncio.get_event_loop().time())
            filename = f"outfit_{timestamp}.png"
            filepath = self.output_path / filename
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            async with aiofiles.open(filepath, 'wb') as f:
                await f.write(image_data)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
            return f"/uploads/generated_outfits/{filename}"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return await self._generate_placeholder_image(product_items)
    
    async def _generate_placeholder_image(self, product_items: List[Dict[str, Any]]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–∞—Ö"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫—É
            width, height = 512, 1024
            image = Image.new("RGB", (width, height), color=(245, 245, 245))
            draw = ImageDraw.Draw(image)
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            draw.text((20, 20), "AI Outfit Generation", fill=(100, 100, 100))
            draw.text((20, 50), "–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", fill=(150, 150, 150))
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö
            y_offset = 100
            for i, item in enumerate(product_items[:8]):  # –ú–∞–∫—Å–∏–º—É–º 8 —Ç–æ–≤–∞—Ä–æ–≤
                text = f"‚Ä¢ {item.get('brand', 'Unknown')} - {item.get('name', 'Product')[:30]}"
                draw.text((20, y_offset), text, fill=(80, 80, 80))
                y_offset += 30
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º placeholder
            timestamp = int(asyncio.get_event_loop().time())
            filename = f"placeholder_{timestamp}.png"
            filepath = self.output_path / filename
            
            image.save(filepath)
            
            return f"/uploads/generated_outfits/{filename}"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è placeholder: {e}")
            return "https://dummyimage.com/512x1024/eeeeee/000000.png&text=Outfit+Generation+Error"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
image_generation_service = ImageGenerationService() 