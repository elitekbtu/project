#!/usr/bin/env python3
"""
–ê–≥–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
"""

import time
from typing import Dict, Any, List, Optional
from .base_agent import BaseAgent, AgentResult, ConversationContext, UserMood, FallbackHandler
from .intent_recognition_agent import IntentType
from openai import AsyncAzureOpenAI
from app.core.config import get_settings

settings = get_settings()

class ResponseGenerationAgent(BaseAgent):
    """–ê–≥–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
    
    def __init__(self):
        super().__init__("response_generation")
        self.client = None
        self._initialize_client()
        self.response_templates = self._setup_response_templates()
        
    def _initialize_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞"""
        if (settings.AZURE_OPENAI_API_KEY and settings.AZURE_OPENAI_API_KEY.strip() and 
            settings.AZURE_OPENAI_ENDPOINT and settings.AZURE_OPENAI_ENDPOINT.strip()):
            self.client = AsyncAzureOpenAI(
                api_version=settings.AZURE_OPENAI_API_VERSION,
                azure_endpoint=settings.AZURE_OPENAI_ENDPOINT,
                api_key=settings.AZURE_OPENAI_API_KEY,
            )
            self.logger.info("Azure OpenAI –∫–ª–∏–µ–Ω—Ç –¥–ª—è ResponseGenerationAgent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            self.logger.warning("Azure OpenAI –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî ResponseGenerationAgent –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã")
    
    def _setup_response_templates(self) -> Dict[str, List[str]]:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤"""
        return {
            'greeting': [
                "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –≤–∞—à –ò–ò-—Å—Ç–∏–ª–∏—Å—Ç –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –æ–¥–µ–∂–¥—ã! üòä –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üåü –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª–∏—Å—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å–æ–∑–¥–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑! ‚ú®",
                "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! üéâ –Ø –ò–ò-—Å—Ç–∏–ª–∏—Å—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –ø–æ–¥–±–æ—Ä–µ —Å—Ç–∏–ª—å–Ω–æ–π –æ–¥–µ–∂–¥—ã. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üí´"
            ],
            'small_talk': [
                "–û—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ! üòä –ê –∫–∞–∫ —É –≤–∞—Å –¥–µ–ª–∞? –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –æ–¥–µ–∂–¥—ã! üëó",
                "–í—Å–µ —Ö–æ—Ä–æ—à–æ, —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å—Ç–∏–ª—å–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤! üåü –ê –≤—ã –≥–æ—Ç–æ–≤—ã –æ–±–Ω–æ–≤–∏—Ç—å –≥–∞—Ä–¥–µ—Ä–æ–±? ‚ú®",
                "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! üí´ –Ø –≤—Å–µ–≥–¥–∞ –≤ —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –∫–æ–≥–¥–∞ –ø–æ–º–æ–≥–∞—é —Å –≤—ã–±–æ—Ä–æ–º –æ–¥–µ–∂–¥—ã! üëï"
            ],
            'product_request': [
                "–û—Ç–ª–∏—á–Ω–æ! üéØ –î–∞–≤–∞–π—Ç–µ –Ω–∞–π–¥–µ–º –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö! üí´",
                "–ü–æ–Ω—è–ª! üîç –°–µ–π—á–∞—Å –ø–æ–¥–±–µ—Ä—É –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –∏—â–µ—Ç–µ? ‚ú®",
                "–ö–æ–Ω–µ—á–Ω–æ! üõçÔ∏è –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã. –ö–∞–∫–∏–µ —É –≤–∞—Å –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ —Å—Ç–∏–ª—é –∏ –±—é–¥–∂–µ—Ç—É? üíé"
            ],
            'size_help': [
                "–ö–æ–Ω–µ—á–Ω–æ! üìè –Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö! üìê",
                "–û—Ç–ª–∏—á–Ω–æ! üëï –†–∞–∑–º–µ—Ä—ã –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–∞. –î–∞–≤–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º –≤–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä! üìä",
                "–ü–æ–º–æ–≥—É! üéØ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - –∑–∞–ª–æ–≥ —Å—Ç–∏–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞. –ö–∞–∫–∏–µ —É –≤–∞—Å –º–µ—Ä–∫–∏? üìè"
            ],
            'style_advice': [
                "–° —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º! üí° –Ø –¥–∞–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Å—Ç–∏–ª—é. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? ‚ú®",
                "–ö–æ–Ω–µ—á–Ω–æ! üåü –Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º —Å—Ç–∏–ª–µ! üí´",
                "–û—Ç–ª–∏—á–Ω–æ! üé® –°—Ç–∏–ª—å - —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑! üé≠"
            ],
            'complaint': [
                "–ü–æ–Ω–∏–º–∞—é –≤–∞—à–µ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ! üòî –î–∞–≤–∞–π—Ç–µ —Ä–µ—à–∏–º —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É –≤–º–µ—Å—Ç–µ. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å? ü§ù",
                "–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! üôè –Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–≥—É –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ? üí™",
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! üìù –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å. –î–∞–≤–∞–π—Ç–µ –Ω–∞–π–¥–µ–º —Ä–µ—à–µ–Ω–∏–µ! üîß"
            ],
            'question': [
                "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! ü§î –° —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –æ—Ç–≤–µ—á—É. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üí°",
                "–ö–æ–Ω–µ—á–Ω–æ! üìö –Ø –∑–Ω–∞—é –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –æ –º–æ–¥–µ –∏ —Å—Ç–∏–ª–µ. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã! üéì",
                "–†–∞–¥ –ø–æ–º–æ—á—å! üí´ –£ –º–µ–Ω—è –µ—Å—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Å—Ç–∏–ª–µ –∏ –æ–¥–µ–∂–¥–µ! üåü"
            ],
            'goodbye': [
                "–î–æ –≤—Å—Ç—Ä–µ—á–∏! üëã –ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–º–æ—á—å! –ù–∞–¥–µ—é—Å—å, –Ω–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä –±—ã–ª –ø–æ–ª–µ–∑–Ω—ã–º! ‚ú®",
                "–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ! üåü –£–¥–∞—á–∏ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∏–ª—å–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤! –ë—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å —Å–Ω–æ–≤–∞! üí´",
                "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—â–µ–Ω–∏–µ! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –µ—â–µ –∑–∞ —Å—Ç–∏–ª—å–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏! üëã"
            ],
            'unclear': [
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª! ü§î –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å? –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! üí™",
                "–ù–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –ø–æ–Ω—è–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ! üòÖ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üí°",
                "–î–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω–∏–º! üéØ –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å –∏–ª–∏ –Ω–∞–π—Ç–∏? –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! ‚ú®"
            ]
        }
    
    async def process(self, input_data: Dict[str, Any], context: ConversationContext) -> AgentResult:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        start_time = time.time()
        
        try:
            user_message = input_data.get('message', '')
            intent_result = input_data.get('intent_result')
            behavior_analysis = input_data.get('behavior_analysis', {})
            
            self.logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç")
            
            # 1. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
            personalization_context = self._create_personalization_context(context, behavior_analysis)
            
            # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            if self.client:
                response = await self._generate_ai_response(user_message, intent_result, personalization_context)
            else:
                response = self._generate_template_response(intent_result, personalization_context)
            
            # 3. –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            personalized_response = self._personalize_response(response, personalization_context)
            
            # 4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
            final_response = self._add_context_hints(personalized_response, context, intent_result)
            
            processing_time = time.time() - start_time
            result = AgentResult(
                success=True,
                data={'response': final_response, 'personalization': personalization_context},
                confidence=0.9,
                processing_time=processing_time
            )
            
            self.update_stats(result, processing_time)
            return result
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ ResponseGenerationAgent: {e}")
            processing_time = time.time() - start_time
            return FallbackHandler.create_fallback_result(
                f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}",
                {'response': "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"}
            )
    
    def _create_personalization_context(self, context: ConversationContext, behavior_analysis: Dict) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏"""
        user_context = context.user_context
        
        personalization = {
            'user_mood': user_context.mood.value,
            'interaction_count': user_context.interaction_count,
            'is_first_time': user_context.interaction_count <= 2,
            'is_returning_user': user_context.interaction_count > 5,
            'favorite_categories': user_context.favorite_categories,
            'style_preferences': user_context.style_preferences,
            'price_range': user_context.price_range,
            'size_preferences': user_context.size_preferences,
            'conversation_history_length': len(user_context.conversation_history),
            'engagement_level': self._calculate_engagement_level(context),
            'behavior_patterns': behavior_analysis.get('behavior_patterns', {}).get('dominant_patterns', []),
            'preferences_confidence': behavior_analysis.get('preferences_analysis', {}).get('preferences_confidence', 0.5)
        }
        
        return personalization
    
    async def _generate_ai_response(self, user_message: str, intent_result, personalization_context: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é AI"""
        try:
            prompt = self._create_ai_prompt(user_message, intent_result, personalization_context)
            
            response = await self.client.chat.completions.create(
                model=settings.AZURE_OPENAI_DEPLOYMENT_NAME,
                messages=[
                    {"role": "system", "content": self._get_system_prompt()},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.8,
                max_tokens=300
            )
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return self._generate_template_response(intent_result, personalization_context)
    
    def _generate_template_response(self, intent_result, personalization_context: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–æ–≤"""
        if not intent_result:
            return self.response_templates['unclear'][0]
        
        intent_type = intent_result.intent.value
        templates = self.response_templates.get(intent_type, self.response_templates['unclear'])
        
        # –í—ã–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        selected_template = self._select_template(templates, personalization_context)
        
        return selected_template
    
    def _personalize_response(self, response: str, personalization_context: Dict) -> str:
        """–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç"""
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if personalization_context.get('is_first_time'):
            response += "\n\nüí° –°–æ–≤–µ—Ç: –Ø –∑–∞–ø–æ–º–∏–Ω–∞—é –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã!"
        
        if personalization_context.get('favorite_categories'):
            categories = ', '.join(personalization_context['favorite_categories'][:2])
            response += f"\n\nüéØ –ö—Å—Ç–∞—Ç–∏, —è –ø–æ–º–Ω—é, —á—Ç–æ –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è: {categories}"
        
        if personalization_context.get('user_mood') == 'excited':
            response += "\n\nüåü –û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ –≤—ã –≤ —Ç–∞–∫–æ–º —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏! –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –±–æ–ª–µ–µ —Å—Ç–∏–ª—å–Ω—ã–π –æ–±—Ä–∞–∑!"
        
        if personalization_context.get('user_mood') == 'confused':
            response += "\n\nü§ù –ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, —è –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –ø—Ä–æ—Å—Ç–æ–≥–æ."
        
        return response
    
    def _add_context_hints(self, response: str, context: ConversationContext, intent_result) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏"""
        if not intent_result:
            return response
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        if intent_result.intent == IntentType.PRODUCT_REQUEST:
            if context.user_context.favorite_categories:
                response += "\n\nüí° –ú–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —Å—Ç–∏–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
            else:
                response += "\n\nüí° –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö: —Å—Ç–∏–ª—å, —Ü–≤–µ—Ç, –±—é–¥–∂–µ—Ç?"
        
        elif intent_result.intent == IntentType.SIZE_HELP:
            response += "\n\nüìè –î–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –≤–∞—à–∏ –º–µ—Ä–∫–∏: —Ä–æ—Å—Ç, –≤–µ—Å, –æ–±—Ö–≤–∞—Ç—ã."
        
        elif intent_result.intent == IntentType.STYLE_ADVICE:
            response += "\n\nüé® –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º —Å—Ç–∏–ª–µ –∂–∏–∑–Ω–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö, —á—Ç–æ–±—ã —è –¥–∞–ª –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã!"
        
        return response
    
    def _create_ai_prompt(self, user_message: str, intent_result, personalization_context: Dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è AI"""
        intent_info = f"–ù–∞–º–µ—Ä–µ–Ω–∏–µ: {intent_result.intent.value}" if intent_result else "–ù–∞–º–µ—Ä–µ–Ω–∏–µ: unclear"
        
        personalization_info = f"""
–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è:
- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {personalization_context.get('user_mood', 'neutral')}
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {personalization_context.get('interaction_count', 0)}
- –õ—é–±–∏–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(personalization_context.get('favorite_categories', []))}
- –°—Ç–∏–ª–µ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {', '.join(personalization_context.get('style_preferences', []))}
- –£—Ä–æ–≤–µ–Ω—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏: {personalization_context.get('engagement_level', 'medium')}
"""
        
        return f"""
–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "{user_message}"
{intent_info}
{personalization_info}

–°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç–≤–µ—Ç:
- –£—á–∏—Ç—ã–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏
- –ë—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–º
- –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–æ–º–æ—â—å
- –£—á–∏—Ç—ã–≤–∞–π –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
- –ê–¥–∞–ø—Ç–∏—Ä—É–π—Å—è –∫ —É—Ä–æ–≤–Ω—é –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
"""
    
    def _get_system_prompt(self) -> str:
        """–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI"""
        return """–¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ò–ò-—Å—Ç–∏–ª–∏—Å—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ –æ–¥–µ–∂–¥—ã.

–¢–í–û–ò –ö–ê–ß–ï–°–¢–í–ê:
- –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö —Å—Ç–∏–ª—è
- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
- –ò—Å–ø–æ–ª—å–∑—É–µ—à—å —ç–º–æ–¥–∑–∏ –¥–ª—è –∂–∏–≤–æ—Å—Ç–∏
- –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å
- –ü–æ–º–æ–≥–∞–µ—à—å —Å –≤—ã–±–æ—Ä–æ–º –æ–¥–µ–∂–¥—ã

–°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
- –¢–µ–ø–ª—ã–π –∏ –ø—Ä–∏–≤–µ—Ç–ª–∏–≤—ã–π
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ (–Ω–æ –Ω–µ –ø–µ—Ä–µ–±–æ—Ä—â–∏)
- –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Ç–æ–Ω
- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø–æ–º–æ—â—å
- –£—á–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–ù–ï –î–ï–õ–ê–ô:
- –°–ª–∏—à–∫–æ–º —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–æ–Ω
- –ú–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏ –ø–æ–¥—Ä—è–¥
- –î–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
- –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –æ–¥–Ω–∏—Ö –∏ —Ç–µ—Ö –∂–µ —Ñ—Ä–∞–∑
- –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    
    def _select_template(self, templates: List[str], personalization_context: Dict) -> str:
        """–í—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω"""
        if not templates:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞
        if personalization_context.get('is_first_time'):
            # –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã–±–∏—Ä–∞–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
            return templates[0] if len(templates) > 0 else templates[0]
        elif personalization_context.get('is_returning_user'):
            # –î–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã–±–∏—Ä–∞–µ–º –±–æ–ª–µ–µ –∫—Ä–∞—Ç–∫–∏–µ —à–∞–±–ª–æ–Ω—ã
            return templates[-1] if len(templates) > 1 else templates[0]
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —à–∞–±–ª–æ–Ω
            import random
            return random.choice(templates)
    
    def _calculate_engagement_level(self, context: ConversationContext) -> str:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏"""
        interaction_count = context.user_context.interaction_count
        
        if interaction_count < 3:
            return 'low'
        elif interaction_count < 10:
            return 'medium'
        else:
            return 'high' 