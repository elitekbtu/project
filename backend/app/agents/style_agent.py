import logging
import asyncio
from typing import List, Dict, Any, Optional, Tuple
from sqlalchemy.orm import Session
from sqlalchemy import or_, and_, func, desc, asc, text
from app.db.models.item import Item
from app.db.models.user import User
from app.db.models.associations import user_favorite_items, UserView
from app.core.config import get_settings
from openai import AsyncAzureOpenAI
import re, json
from app.api.v1.endpoints.profile.schemas import ProfileOut
from app.api.v1.endpoints.items.service import (
    list_items, trending_items, similar_items, 
    list_favorite_items, viewed_items
)
from .base_agent import BaseAgent, AgentResult, ConversationContext

logger = logging.getLogger(__name__)
settings = get_settings()

ITEM_SCHEMA_STR = (
    "id (int), name (str), brand (str), color (str), size (str), clothing_type (str), "
    "description (str), price (float), category (str), article (str), style (str), "
    "collection (str), image_url (str), created_at (datetime), updated_at (datetime)"
)

class StyleAgent(BaseAgent):
    def __init__(self):
        super().__init__("style_agent")
        self.client = None
        self.conversation_state = 'greeting'  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        self.user_interests = []  # –ò–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self._initialize_client()

    def _initialize_client(self):
        if (settings.AZURE_OPENAI_API_KEY and settings.AZURE_OPENAI_API_KEY.strip() and 
            settings.AZURE_OPENAI_ENDPOINT and settings.AZURE_OPENAI_ENDPOINT.strip()):
            self.client = AsyncAzureOpenAI(
                api_version=settings.AZURE_OPENAI_API_VERSION,
                azure_endpoint=settings.AZURE_OPENAI_ENDPOINT,
                api_key=settings.AZURE_OPENAI_API_KEY,
            )
            logger.info("Azure OpenAI –∫–ª–∏–µ–Ω—Ç –¥–ª—è StyleAgent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            logger.warning("Azure OpenAI –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî StyleAgent –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")

    def _is_greeting(self, user_message: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        greeting_patterns = [
            r"–ø—Ä–∏–≤–µ—Ç", r"–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", r"–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", r"–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", r"–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä",
            r"hello", r"hi", r"hey", r"–¥–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫"
        ]
        
        msg = user_message.lower()
        result = any(re.search(p, msg) for p in greeting_patterns)
        logger.info(f"_is_greeting('{user_message}') = {result}")
        return result

    def _is_positive_response(self, user_message: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã"""
        positive_patterns = [
            r"–¥–∞", r"–∫–æ–Ω–µ—á–Ω–æ", r"—Ö–æ—á—É", r"–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", r"–ø–æ–º–æ–≥–∏", r"–¥–∞–≤–∞–π", r"—Ö–æ—Ä–æ—à–æ",
            r"yes", r"sure", r"ok", r"okay", r"—Ö–æ—Ç–µ–ª –±—ã", r"—Ö–æ—Ç–µ–ª–∞ –±—ã", r"–ø–æ–º–æ–≥–∏—Ç–µ"
        ]
        
        msg = user_message.lower()
        result = any(re.search(p, msg) for p in positive_patterns)
        logger.info(f"_is_positive_response('{user_message}') = {result}")
        return result

    def _is_product_request(self, user_message: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ç–æ–≤–∞—Ä—ã"""
        product_patterns = [
            r"—Ñ—É—Ç–±–æ–ª–∫", r"—Ä—É–±–∞—à–∫", r"–¥–∂–∏–Ω—Å", r"–ø–ª–∞—Ç—å", r"–∫—É—Ä—Ç–∫", r"–∫–æ—Å—Ç—é–º", r"–±—Ä—é–∫",
            r"–ø–æ–∫–∞–∂–∏", r"–Ω–∞–π–¥–∏", r"–∏—â—É", r"–Ω—É–∂–Ω", r"—Ö–æ—á—É", r"–¥–∞–π", r"–¥–∞–π—Ç–µ",
            r"—Ü–µ–Ω–∞", r"—Å—Ç–æ–∏–º–æ—Å—Ç—å", r"–¥–∏–∞–ø–∞–∑–æ–Ω", r"–æ—Ç", r"–¥–æ", r"—Ç—ã—Å—è—á", r"—Ç–µ–Ω–≥–µ",
            r"—Ü–≤–µ—Ç", r"—Ä–∞–∑–º–µ—Ä", r"–±—Ä–µ–Ω–¥", r"—Å—Ç–∏–ª—å", r"–º–æ–¥–∞", r"–æ–¥–µ–∂–¥",
            r"–≤–µ—á–µ—Ä–∏–Ω–∫", r"–ø—Ä–∞–∑–¥–Ω", r"—Ç–æ—Ä–∂–µ—Å—Ç–≤", r"–≤—ã—Ö–æ–¥", r"–≤—ã—Ö–æ–¥–Ω", r"—Å–æ–±—ã—Ç–∏",
            r"–æ–±—Ä–∞–∑", r"–ª—É–∫", r"–∫–æ–º–ø–ª–µ–∫—Ç", r"–Ω–∞—Ä—è–¥", r"—á—Ç–æ –æ–¥–µ—Ç—å", r"—á—Ç–æ –Ω–∞–¥–µ—Ç—å",
            r"–ø–æ–¥–æ–±—Ä–∞—Ç—å", r"–≤—ã–±—Ä–∞—Ç—å", r"–∫—É–ø–∏—Ç—å", r"–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏"
        ]
        
        msg = user_message.lower()
        result = any(re.search(p, msg) for p in product_patterns)
        logger.info(f"_is_product_request('{user_message}') = {result}")
        return result

    async def _handle_greeting(self, user_message: str, user_profile: ProfileOut = None) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–º–æ—â—å"""
        logger.info(f"_handle_greeting –≤—ã–∑–≤–∞–Ω —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º: '{user_message}'")
        
        user_info = ""
        if user_profile:
            user_info = (
                f"\n–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                f"–†–æ—Å—Ç: {user_profile.height or '-'} —Å–º, –í–µ—Å: {user_profile.weight or '-'} –∫–≥, "
                f"–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏: {user_profile.chest or '-'} —Å–º, —Ç–∞–ª–∏–∏: {user_profile.waist or '-'} —Å–º, –±—ë–¥–µ—Ä: {user_profile.hips or '-'} —Å–º. "
                f"–õ—é–±–∏–º—ã–µ –±—Ä–µ–Ω–¥—ã: {', '.join(user_profile.favorite_brands) if user_profile.favorite_brands else '-'}; "
                f"–õ—é–±–∏–º—ã–µ —Ü–≤–µ—Ç–∞: {', '.join(user_profile.favorite_colors) if user_profile.favorite_colors else '-'}"
            )
        
        prompt = (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: '{user_message}'. "
            "–¢—ã ‚Äî –∂–∏–≤–æ–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç-—Å—Ç–∏–ª–∏—Å—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ –æ–¥–µ–∂–¥—ã. "
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–∑–¥–æ—Ä–æ–≤–∞–ª—Å—è —Å —Ç–æ–±–æ–π. "
            "–û—Ç–≤–µ—á–∞–π —Ç–µ–ø–ª–æ, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è –∫–∞–∫ –ò–ò-—Å—Ç–∏–ª–∏—Å—Ç, –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–≤–æ—é –ø–æ–º–æ—â—å. "
            "–°–ø—Ä–æ—Å–∏, —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –º–æ–∂–µ—à—å –ª–∏ —Ç—ã –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –æ–¥–µ–∂–¥—ã. "
            "–ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å, —ç–º–æ–¥–∑–∏, –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º."
            f"{user_info}\n"
            "–í–ê–ñ–ù–û: –ù–ï –ø—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–∫–∞, —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–º–æ—â—å –∏ —Å–ø—Ä–æ—Å–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã."
        )
        
        try:
            response = await self.client.chat.completions.create(
                model=settings.AZURE_OPENAI_DEPLOYMENT_NAME,
                messages=[
                    {"role": "system", "content": "–¢—ã ‚Äî –∂–∏–≤–æ–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç-—Å—Ç–∏–ª–∏—Å—Ç. –û—Ç–≤–µ—á–∞–π —Ç–µ–ø–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, –ù–ï –ø—Ä–µ–¥–ª–∞–≥–∞–π —Ç–æ–≤–∞—Ä—ã –ø–æ–∫–∞, —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–º–æ—â—å."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.8,
                max_tokens=200
            )
            answer = response.choices[0].message.content.strip()
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
            self.conversation_state = 'waiting_for_interest'
            logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {self.conversation_state}")
            
            return {"reply": answer, "items": []}
        except Exception as e:
            logger.error(f"StyleAgent Azure OpenAI error (greeting): {e}")
            self.conversation_state = 'waiting_for_interest'
            logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {self.conversation_state} (fallback)")
            return {"reply": "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –≤–∞—à –ò–ò-—Å—Ç–∏–ª–∏—Å—Ç –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –æ–¥–µ–∂–¥—ã! üòä –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? –ú–æ–≥—É –ø–æ–º–æ—á—å –ø–æ–¥–æ–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ —Å—Ç–∏–ª—å–Ω–æ–µ –∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏–º–µ–Ω–Ω–æ –≤–∞–º!", "items": []}

    async def _handle_interest_confirmation(self, user_message: str, user_profile: ProfileOut = None) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã"""
        prompt = (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø–æ–º–æ—â–∏: '{user_message}'. "
            "–¢—ã ‚Äî –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç-—Å—Ç–∏–ª–∏—Å—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ —Ç–≤–æ—é –ø–æ–º–æ—â—å. "
            "–ü—Ä–µ–¥–ª–æ–∂–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–æ–≥–æ, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å –≤—ã–±—Ä–∞—Ç—å: "
            "- –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—É—é –æ–¥–µ–∂–¥—É (—Ñ—É—Ç–±–æ–ª–∫–∏, –¥–∂–∏–Ω—Å—ã, —Ä—É–±–∞—à–∫–∏) "
            "- –î–µ–ª–æ–≤—É—é –æ–¥–µ–∂–¥—É (–∫–æ—Å—Ç—é–º—ã, —Ä—É–±–∞—à–∫–∏, –±—Ä—é–∫–∏) "
            "- –°–ø–æ—Ä—Ç–∏–≤–Ω—É—é –æ–¥–µ–∂–¥—É "
            "- –û–¥–µ–∂–¥—É –¥–ª—è –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤ "
            "- –ü–æ–º–æ—â—å —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∏ —Å—Ç–∏–ª–µ–º "
            "–ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, —Å–ø—Ä–æ—Å–∏ —á—Ç–æ –∏–º–µ–Ω–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç."
        )
        
        try:
            response = await self.client.chat.completions.create(
                model=settings.AZURE_OPENAI_DEPLOYMENT_NAME,
                messages=[
                    {"role": "system", "content": "–¢—ã ‚Äî –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç-—Å—Ç–∏–ª–∏—Å—Ç. –ü—Ä–µ–¥–ª–æ–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–º–æ—â–∏, –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.8,
                max_tokens=250
            )
            answer = response.choices[0].message.content.strip()
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            self.conversation_state = 'suggesting_options'
            
            return {"reply": answer, "items": []}
        except Exception as e:
            logger.error(f"StyleAgent Azure OpenAI error (interest): {e}")
            self.conversation_state = 'suggesting_options'
            return {"reply": "–û—Ç–ª–∏—á–Ω–æ! üòä –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –≤—ã–±–æ—Ä–æ–º:\n\nüëï –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –æ–¥–µ–∂–¥—ã (—Ñ—É—Ç–±–æ–ª–∫–∏, –¥–∂–∏–Ω—Å—ã, —Ä—É–±–∞—à–∫–∏)\nüëî –î–µ–ª–æ–≤–æ–π –æ–¥–µ–∂–¥—ã (–∫–æ—Å—Ç—é–º—ã, —Ä—É–±–∞—à–∫–∏)\nüèÉ‚Äç‚ôÄÔ∏è –°–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –æ–¥–µ–∂–¥—ã\n‚ú® –û–¥–µ–∂–¥—ã –¥–ª—è –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤\nüìè –ü–æ–º–æ—â—å—é —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∏ —Å—Ç–∏–ª–µ–º\n\n–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", "items": []}

    async def _suggest_options(self, user_message: str, user_profile: ProfileOut = None) -> Dict[str, Any]:
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        interests = []
        msg_lower = user_message.lower()
        
        if any(word in msg_lower for word in ['–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω', 'casual', '–æ–±—ã—á–Ω']):
            interests.append('–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è –æ–¥–µ–∂–¥–∞')
        if any(word in msg_lower for word in ['–¥–µ–ª–æ–≤', '–æ—Ñ–∏—Å', 'business', '—Ä–∞–±–æ—á']):
            interests.append('–¥–µ–ª–æ–≤–∞—è –æ–¥–µ–∂–¥–∞')
        if any(word in msg_lower for word in ['—Å–ø–æ—Ä—Ç', 'sport', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫']):
            interests.append('—Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –æ–¥–µ–∂–¥–∞')
        if any(word in msg_lower for word in ['–æ—Å–æ–±', '–≤–µ—á–µ—Ä–Ω', '–ø—Ä–∞–∑–¥–Ω', '—Ç–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω']):
            interests.append('–æ–¥–µ–∂–¥–∞ –¥–ª—è –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤')
        if any(word in msg_lower for word in ['—Ä–∞–∑–º–µ—Ä', '—Ä–∞–∑–º–µ—Ä—ã', '–ø–æ–¥–æ–±—Ä–∞—Ç—å']):
            interests.append('–ø–æ–º–æ—â—å —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏')
        
        # –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        if not interests:
            interests = ['–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è –æ–¥–µ–∂–¥–∞', '–¥–µ–ª–æ–≤–∞—è –æ–¥–µ–∂–¥–∞', '—Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –æ–¥–µ–∂–¥–∞']
        
        prompt = (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è: '{user_message}'. "
            f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(interests)}. "
            "–ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–¥–µ–∂–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å. "
            "–ù–∞–ø—Ä–∏–º–µ—Ä: —Ñ—É—Ç–±–æ–ª–∫–∏, —Ä—É–±–∞—à–∫–∏, –¥–∂–∏–Ω—Å—ã, –ø–ª–∞—Ç—å—è, –∫—É—Ä—Ç–∫–∏ –∏ —Ç.–¥. "
            "–ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏."
        )
        
        try:
            response = await self.client.chat.completions.create(
                model=settings.AZURE_OPENAI_DEPLOYMENT_NAME,
                messages=[
                    {"role": "system", "content": "–¢—ã ‚Äî –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç-—Å—Ç–∏–ª–∏—Å—Ç. –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–¥–µ–∂–¥—ã, –±—É–¥—å –∫—Ä–∞—Ç–∫–∏–º, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.8,
                max_tokens=200
            )
            answer = response.choices[0].message.content.strip()
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤
            self.conversation_state = 'searching_products'
            
            return {"reply": answer, "items": []}
        except Exception as e:
            logger.error(f"StyleAgent Azure OpenAI error (suggestions): {e}")
            self.conversation_state = 'searching_products'
            return {"reply": "–û—Ç–ª–∏—á–Ω–æ! üòä –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:\n\nüëï –§—É—Ç–±–æ–ª–∫–∏ –∏ —Ä—É–±–∞—à–∫–∏\nüëñ –î–∂–∏–Ω—Å—ã –∏ –±—Ä—é–∫–∏\nüëó –ü–ª–∞—Ç—å—è –∏ —é–±–∫–∏\nüß• –ö—É—Ä—Ç–∫–∏ –∏ –ø–∞–ª—å—Ç–æ\nüëü –û–±—É–≤—å\n\n–ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å? –ú–æ–≥—É –Ω–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã!", "items": []}

    def is_small_talk(self, user_message: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç small talk —Å–æ–æ–±—â–µ–Ω–∏—è"""
        small_talk_patterns = [
            r"–ø—Ä–∏–≤–µ—Ç", r"–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", r"–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", r"–∫–∞–∫ –¥–µ–ª–∞", r"—á—Ç–æ –Ω–æ–≤–æ–≥–æ",
            r"–∫–∞–∫ —Ç—ã", r"—á–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è", r"—á—Ç–æ –¥–µ–ª–∞–µ—à—å", r"–∫–∞–∫ –∂–∏–∑–Ω—å", r"–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
            r"hello", r"hi", r"how are you", r"what's up", r"good morning", r"good evening", 
            r"—Å–ø–∞—Å–∏–±–æ", r"thanks", r"—Ö–æ—Ä–æ—à–æ", r"–ø–ª–æ—Ö–æ", r"–Ω–æ—Ä–º–∞–ª—å–Ω–æ", r"–æ—Ç–ª–∏—á–Ω–æ"
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç–æ–≤–∞—Ä—ã
        shopping_patterns = [
            r"—Ñ—É—Ç–±–æ–ª–∫", r"—Ä—É–±–∞—à–∫", r"–¥–∂–∏–Ω—Å", r"–ø–ª–∞—Ç—å", r"–∫—É—Ä—Ç–∫", r"–∫–æ—Å—Ç—é–º", r"–±—Ä—é–∫",
            r"–ø–æ–∫–∞–∂–∏", r"–Ω–∞–π–¥–∏", r"–∏—â—É", r"–Ω—É–∂–Ω", r"—Ö–æ—á—É", r"–¥–∞–π", r"–¥–∞–π—Ç–µ",
            r"—Ü–µ–Ω–∞", r"—Å—Ç–æ–∏–º–æ—Å—Ç—å", r"–¥–∏–∞–ø–∞–∑–æ–Ω", r"–æ—Ç", r"–¥–æ", r"—Ç—ã—Å—è—á", r"—Ç–µ–Ω–≥–µ",
            r"—Ü–≤–µ—Ç", r"—Ä–∞–∑–º–µ—Ä", r"–±—Ä–µ–Ω–¥", r"—Å—Ç–∏–ª—å", r"–º–æ–¥–∞"
        ]
        
        msg = user_message.lower()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–æ–≤–∞ –æ –ø–æ–∫—É–ø–∫–∞—Ö, —ç—Ç–æ –Ω–µ small talk
        if any(re.search(p, msg) for p in shopping_patterns):
            return False
            
        # –ò–Ω–∞—á–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ small talk
        return any(re.search(p, msg) for p in small_talk_patterns)

    def _analyze_user_preferences(self, db: Session, user_profile: ProfileOut = None) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è –∏ –∏—Å—Ç–æ—Ä–∏–∏"""
        preferences = {
            'favorite_brands': [],
            'favorite_colors': [],
            'favorite_categories': [],
            'price_range': {'min': 0, 'max': float('inf')},
            'size_preferences': [],
            'style_preferences': []
        }
        
        if user_profile:
            preferences['favorite_brands'] = user_profile.favorite_brands or []
            preferences['favorite_colors'] = user_profile.favorite_colors or []
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–µ–ª–∞
            if user_profile.height and user_profile.weight:
                # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
                if user_profile.height < 160:
                    preferences['size_preferences'].extend(['XS', 'S'])
                elif user_profile.height < 170:
                    preferences['size_preferences'].extend(['S', 'M'])
                elif user_profile.height < 180:
                    preferences['size_preferences'].extend(['M', 'L'])
                else:
                    preferences['size_preferences'].extend(['L', 'XL', 'XXL'])
        
        return preferences

    def _get_market_insights(self, db: Session) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Ä—ã–Ω–∫–∞ –∏ —Ç—Ä–µ–Ω–¥—ã"""
        insights = {}
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –±—Ä–µ–Ω–¥—ã
        brand_stats = db.query(
            Item.brand, 
            func.count(Item.id).label('count'),
            func.avg(Item.price).label('avg_price')
        ).filter(
            Item.brand.isnot(None)
        ).group_by(Item.brand).order_by(desc('count')).limit(10).all()
        
        insights['popular_brands'] = [
            {'brand': brand, 'count': count, 'avg_price': float(avg_price) if avg_price else 0}
            for brand, count, avg_price in brand_stats
        ]
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_stats = db.query(
            Item.category,
            func.count(Item.id).label('count'),
            func.avg(Item.price).label('avg_price')
        ).filter(
            Item.category.isnot(None)
        ).group_by(Item.category).order_by(desc('count')).limit(10).all()
        
        insights['popular_categories'] = [
            {'category': cat, 'count': count, 'avg_price': float(avg_price) if avg_price else 0}
            for cat, count, avg_price in category_stats
        ]
        
        # –¶–µ–Ω–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
        price_stats = db.query(
            func.min(Item.price).label('min_price'),
            func.max(Item.price).label('max_price'),
            func.avg(Item.price).label('avg_price')
        ).filter(Item.price.isnot(None)).first()
        
        insights['price_analysis'] = {
            'min_price': float(price_stats.min_price) if price_stats.min_price else 0,
            'max_price': float(price_stats.max_price) if price_stats.max_price else 0,
            'avg_price': float(price_stats.avg_price) if price_stats.avg_price else 0
        }
        
        return insights

    def _smart_search_with_direct_queries(self, db: Session, user_message: str, user_profile: ProfileOut = None, limit: int = 10) -> Dict[str, List[Item]]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —É–º–Ω—ã–µ –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î"""
        results = {}
        preferences = self._analyze_user_preferences(db, user_profile)
        request_params = self._parse_user_request(user_message)
        user_limit = request_params.get('limit', limit)
        
        # 1. –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É
        main_items = self._search_main_query(db, request_params, user_limit)
        results['main_results'] = main_items
        
        # 2. –ü–æ–∏—Å–∫ –ø–æ –ª—é–±–∏–º—ã–º –±—Ä–µ–Ω–¥–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)
        if preferences['favorite_brands'] and not request_params.get('category'):
            brand_items = self._search_by_brands(db, preferences['favorite_brands'], user_limit)
            results['favorite_brands'] = brand_items
        
        # 3. –ü–æ–∏—Å–∫ –ø–æ –ª—é–±–∏–º—ã–º —Ü–≤–µ—Ç–∞–º (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ)
        if preferences['favorite_colors'] and not request_params.get('color'):
            color_items = self._search_by_colors(db, preferences['favorite_colors'], user_limit)
            results['favorite_colors'] = color_items
        
        # 4. –¢—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)
        if not request_params.get('category') and not request_params.get('color'):
            trending_items = self._get_trending_items(db, user_limit)
            results['trending'] = trending_items
        
        # 5. –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–º–µ—Ä—É (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)
        if preferences['size_preferences'] and not request_params.get('category'):
            size_items = self._search_by_sizes(db, preferences['size_preferences'], user_limit)
            results['size_match'] = size_items
        
        # 6. –ü–æ–∏—Å–∫ –≤ —Ü–µ–Ω–æ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
        if request_params.get('price_range'):
            price_items = self._search_by_price_range(db, request_params['price_range'], request_params, user_limit)
            results['price_match'] = price_items
        
        # 7. –ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∏–ª—é (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
        if request_params.get('style'):
            style_items = self._search_by_style(db, request_params['style'], request_params, user_limit)
            results['style_match'] = style_items
        
        return results

    def _search_main_query(self, db: Session, request_params: Dict, limit: int) -> List[Item]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = db.query(Item)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if request_params.get('category'):
            category = request_params['category']
            # –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –∏—â–µ–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_filters = [
                Item.name.ilike(f"%{category}%"),
                Item.category.ilike(f"%{category}%"),
                Item.clothing_type.ilike(f"%{category}%")
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è —Ñ—É—Ç–±–æ–ª–æ–∫
            if category == '—Ñ—É—Ç–±–æ–ª–∫–∞':
                category_filters.extend([
                    Item.category.ilike("%—Ñ—É—Ç–±–æ–ª–∫%"),
                    Item.category.ilike("%—Ç–æ–ø%"),
                    Item.name.ilike("%—Ñ—É—Ç–±–æ–ª–∫%"),
                    Item.name.ilike("%–º–∞–π–∫%")
                ])
            
            query = query.filter(or_(*category_filters))
            logger.info(f"–ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: {category_filters}")
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ü–≤–µ—Ç—É
        if request_params.get('color'):
            color = request_params['color']
            query = query.filter(Item.color.ilike(f"%{color}%"))
            logger.info(f"–ü–æ–∏—Å–∫ –ø–æ —Ü–≤–µ—Ç—É '{color}'")
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ - –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô –§–ò–õ–¨–¢–†
        if request_params.get('price_range'):
            price_range = request_params['price_range']
            logger.info(f"–ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ: {price_range}")
            
            if price_range.get('min') is not None:
                query = query.filter(Item.price >= price_range['min'])
                logger.info(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {price_range['min']}")
            
            if price_range.get('max') is not None and price_range['max'] != float('inf'):
                query = query.filter(Item.price <= price_range['max'])
                logger.info(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {price_range['max']}")
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        if request_params.get('sort_order') == 'asc':
            query = query.order_by(Item.price.asc())
        elif request_params.get('sort_order') == 'desc':
            query = query.order_by(Item.price.desc())
        else:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Ü–µ–Ω—ã
            if request_params.get('price_range'):
                query = query.order_by(Item.price.asc())
            else:
                query = query.order_by(Item.price.desc())  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ—Ä–æ–≥–∏–µ
        
        result = query.limit(limit).all()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(result)} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        for item in result:
            logger.info(f"–ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: {item.name} - {item.price} ‚Ç∏")
        
        return result

    def _search_by_brands(self, db: Session, brands: List[str], limit: int) -> List[Item]:
        """–ü–æ–∏—Å–∫ –ø–æ –±—Ä–µ–Ω–¥–∞–º"""
        if not brands:
            return []
        
        brand_filters = []
        for brand in brands[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –±—Ä–µ–Ω–¥–∞
            brand_filters.append(Item.brand.ilike(f"%{brand}%"))
        
        query = db.query(Item).filter(or_(*brand_filters)).order_by(Item.price.desc())
        return query.limit(limit).all()

    def _search_by_colors(self, db: Session, colors: List[str], limit: int) -> List[Item]:
        """–ü–æ–∏—Å–∫ –ø–æ —Ü–≤–µ—Ç–∞–º"""
        if not colors:
            return []
        
        color_filters = []
        for color in colors[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ü–≤–µ—Ç–∞
            color_filters.append(Item.color.ilike(f"%{color}%"))
        
        query = db.query(Item).filter(or_(*color_filters)).order_by(Item.price.desc())
        return query.limit(limit).all()

    def _get_trending_items(self, db: Session, limit: int) -> List[Item]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ - —Å–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ —Ç–æ–≤–∞—Ä—ã –∫–∞–∫ —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ
        query = db.query(Item).filter(Item.price.isnot(None)).order_by(Item.price.desc())
        return query.limit(limit).all()

    def _search_by_sizes(self, db: Session, sizes: List[str], limit: int) -> List[Item]:
        """–ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º"""
        if not sizes:
            return []
        
        size_filters = []
        for size in sizes[:3]:
            size_filters.append(Item.size.ilike(f"%{size}%"))
        
        query = db.query(Item).filter(or_(*size_filters)).order_by(Item.price.desc())
        return query.limit(limit).all()

    def _search_by_price_range(self, db: Session, price_range: Dict, request_params: Dict, limit: int) -> List[Item]:
        """–ü–æ–∏—Å–∫ –≤ —Ü–µ–Ω–æ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ"""
        query = db.query(Item).filter(Item.price.isnot(None))
        
        if price_range.get('min') is not None:
            query = query.filter(Item.price >= price_range['min'])
        if price_range.get('max') is not None and price_range['max'] != float('inf'):
            query = query.filter(Item.price <= price_range['max'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        if request_params.get('category'):
            category = request_params['category']
            query = query.filter(
                or_(
                    Item.name.ilike(f"%{category}%"),
                    Item.category.ilike(f"%{category}%")
                )
            )
        
        if request_params.get('color'):
            color = request_params['color']
            query = query.filter(Item.color.ilike(f"%{color}%"))
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        if request_params.get('sort_order') == 'asc':
            query = query.order_by(Item.price.asc())
        else:
            query = query.order_by(Item.price.desc())
        
        return query.limit(limit).all()

    def _search_by_style(self, db: Session, style: str, request_params: Dict, limit: int) -> List[Item]:
        """–ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∏–ª—é"""
        query = db.query(Item)
        
        # –°—Ç–∏–ª–µ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
        style_keywords = {
            'casual': ['casual', '–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω', '–æ–±—ã—á–Ω', '–∫–æ–º—Ñ–æ—Ä—Ç–Ω', '–±–∞–∑–æ–≤'],
            'business': ['business', '–¥–µ–ª–æ–≤', '–æ—Ñ–∏—Å', '–∫–ª–∞—Å—Å–∏—á', '—ç–ª–µ–≥–∞–Ω—Ç'],
            'elegant': ['elegant', '—ç–ª–µ–≥–∞–Ω—Ç', '–≤–µ—á–µ—Ä–Ω', '—Ç–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω', '–ø—Ä–∞–∑–¥–Ω–∏—á'],
            'sport': ['sport', '—Å–ø–æ—Ä—Ç–∏–≤', '—Ñ–∏—Ç–Ω–µ—Å', '–∞–∫—Ç–∏–≤', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω']
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Å—Ç–∏–ª—è
        keywords = style_keywords.get(style, [style])
        
        # –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞
        style_conditions = []
        for keyword in keywords:
            style_conditions.extend([
                Item.style.ilike(f"%{keyword}%"),
                Item.name.ilike(f"%{keyword}%"),
                Item.category.ilike(f"%{keyword}%")
            ])
        
        if style_conditions:
            query = query.filter(or_(*style_conditions))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è —Å—Ç–∏–ª–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if request_params.get('style_request') and request_params.get('recommended_categories'):
            recommended_categories = request_params['recommended_categories']
            category_conditions = []
            for category in recommended_categories:
                category_conditions.append(Item.name.ilike(f"%{category}%"))
            
            if category_conditions:
                query = query.filter(or_(*category_conditions))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        if request_params.get('category'):
            category = request_params['category']
            query = query.filter(
                or_(
                    Item.name.ilike(f"%{category}%"),
                    Item.category.ilike(f"%{category}%")
                )
            )
        
        if request_params.get('color'):
            color = request_params['color']
            query = query.filter(Item.color.ilike(f"%{color}%"))
        
        return query.order_by(Item.price.desc()).limit(limit).all()

    def _parse_user_request(self, user_message: str) -> Dict[str, Any]:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        message_lower = user_message.lower()
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–¥–µ–∂–¥—ã
        clothing_keywords = {
            '—Ñ—É—Ç–±–æ–ª–∫–∞': ['—Ñ—É—Ç–±–æ–ª–∫–∞', 'tshirt', 't-shirt', '–º–∞–π–∫–∞', '—Ñ—É—Ç–±–æ–ª–∫–∏'],
            '—Ä—É–±–∞—à–∫–∞': ['—Ä—É–±–∞—à–∫–∞', 'shirt', '–±–ª—É–∑–∫–∞', '—Ä—É–±–∞—à–∫–∏'],
            '–¥–∂–∏–Ω—Å—ã': ['–¥–∂–∏–Ω—Å—ã', 'jeans', '–±—Ä—é–∫–∏', 'pants', '–¥–∂–∏–Ω—Å—ã'],
            '–ø–ª–∞—Ç—å–µ': ['–ø–ª–∞—Ç—å–µ', 'dress', '—Å–∞—Ä–∞—Ñ–∞–Ω', '–ø–ª–∞—Ç—å—è'],
            '–∫—É—Ä—Ç–∫–∞': ['–∫—É—Ä—Ç–∫–∞', 'jacket', '–ø–∞–ª—å—Ç–æ', 'coat', '–∫—É—Ä—Ç–∫–∏'],
            '—Å–≤–∏—Ç–µ—Ä': ['—Å–≤–∏—Ç–µ—Ä', 'sweater', '–∫–æ—Ñ—Ç–∞', '–¥–∂–µ–º–ø–µ—Ä', '—Å–≤–∏—Ç–µ—Ä–∞'],
            '—é–±–∫–∞': ['—é–±–∫–∞', 'skirt', '—é–±–∫–∏'],
            '—à–æ—Ä—Ç—ã': ['—à–æ—Ä—Ç—ã', 'shorts'],
            '–æ–±—É–≤—å': ['–æ–±—É–≤—å', '—Ç—É—Ñ–ª–∏', '–∫—Ä–æ—Å—Å–æ–≤–∫–∏', '–±–æ—Ç–∏–Ω–∫–∏', 'shoes', 'sneakers', 'boots']
        }
        
        # –°—Ç–∏–ª–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –ø–æ–≤–æ–¥—ã
        style_occasions = {
            '—à–∫–æ–ª–∞': {
                'keywords': ['—à–∫–æ–ª', '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', '–∫–æ–ª–ª–µ–¥–∂', '—É—á–µ–±–∞', '—É—á–µ–±'],
                'style': 'casual',
                'price_range': {'min': 1000, 'max': 15000},
                'categories': ['—Ñ—É—Ç–±–æ–ª–∫–∞', '—Ä—É–±–∞—à–∫–∞', '–¥–∂–∏–Ω—Å—ã', '—Å–≤–∏—Ç–µ—Ä', '–∫—É—Ä—Ç–∫–∞', '–æ–±—É–≤—å']
            },
            '—Ä–∞–±–æ—Ç–∞': {
                'keywords': ['—Ä–∞–±–æ—Ç–∞', '–æ—Ñ–∏—Å', '–¥–µ–ª–æ–≤–æ–π', '–±–∏–∑–Ω–µ—Å'],
                'style': 'business',
                'price_range': {'min': 5000, 'max': 30000},
                'categories': ['—Ä—É–±–∞—à–∫–∞', '–¥–∂–∏–Ω—Å—ã', '–ø–ª–∞—Ç—å–µ', '–∫—É—Ä—Ç–∫–∞', '–æ–±—É–≤—å']
            },
            '–≤–µ—á–µ—Ä–∏–Ω–∫–∞': {
                'keywords': ['–≤–µ—á–µ—Ä–∏–Ω–∫', '–ø—Ä–∞–∑–¥–Ω–∏–∫', '—Ç–æ—Ä–∂–µ—Å—Ç–≤–æ', '—Å–≤–∞–¥—å–±', '–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è'],
                'style': 'elegant',
                'price_range': {'min': 5000, 'max': 50000},
                'categories': ['–ø–ª–∞—Ç—å–µ', '—Ä—É–±–∞—à–∫–∞', '–¥–∂–∏–Ω—Å—ã', '–∫—É—Ä—Ç–∫–∞', '–æ–±—É–≤—å']
            },
            '–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π': {
                'keywords': ['–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω', '–∫–∞–∂–¥–æ–¥–Ω–µ–≤–Ω', '–æ–±—ã—á–Ω', '–∫–ª–∞—Å—Å–∏–∫'],
                'style': 'casual',
                'price_range': {'min': 2000, 'max': 20000},
                'categories': ['—Ñ—É—Ç–±–æ–ª–∫–∞', '—Ä—É–±–∞—à–∫–∞', '–¥–∂–∏–Ω—Å—ã', '—Å–≤–∏—Ç–µ—Ä', '–∫—É—Ä—Ç–∫–∞', '–æ–±—É–≤—å']
            },
            '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π': {
                'keywords': ['—Å–ø–æ—Ä—Ç', '—Ñ–∏—Ç–Ω–µ—Å', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫', '–∞–∫—Ç–∏–≤–Ω—ã–π'],
                'style': 'sport',
                'price_range': {'min': 1000, 'max': 15000},
                'categories': ['—Ñ—É—Ç–±–æ–ª–∫–∞', '—Å–≤–∏—Ç–µ—Ä', '—à–æ—Ä—Ç—ã', '–¥–∂–∏–Ω—Å—ã', '–æ–±—É–≤—å']
            }
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∏–ª–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        detected_occasion = None
        for occasion, config in style_occasions.items():
            if any(keyword in message_lower for keyword in config['keywords']):
                detected_occasion = occasion
                break
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å—Ç–∏–ª–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if detected_occasion:
            occasion_config = style_occasions[detected_occasion]
            return {
                'category': None,  # –ù–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å—Ç–∏–ª–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                'style': occasion_config['style'],
                'price_range': occasion_config['price_range'],
                'sort_order': 'desc',
                'limit': 15,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è —Å—Ç–∏–ª–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                'style_request': True,  # –§–ª–∞–≥ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                'occasion': detected_occasion,
                'recommended_categories': occasion_config['categories'],
                'original_message': user_message
            }
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤–µ—á–µ—Ä–∏–Ω–æ–∫ –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ (fallback)
        if any(word in message_lower for word in ['–≤–µ—á–µ—Ä–∏–Ω–∫', '–ø—Ä–∞–∑–¥–Ω', '—Ç–æ—Ä–∂–µ—Å—Ç–≤', '–≤—ã—Ö–æ–¥', '–≤—ã—Ö–æ–¥–Ω', '—Å–æ–±—ã—Ç–∏']):
            # –î–ª—è –≤–µ—á–µ—Ä–∏–Ω–æ–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–ª–∞—Ç—å—è, –∫–æ—Å—Ç—é–º—ã, —ç–ª–µ–≥–∞–Ω—Ç–Ω—É—é –æ–¥–µ–∂–¥—É
            if not any(keyword in message_lower for keywords in clothing_keywords.values() for keyword in keywords):
                return {
                    'category': None,  # –ù–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–µ—á–µ—Ä–∏–Ω–æ–∫
                    'style': 'elegant',
                    'price_range': {'min': 5000, 'max': 50000},  # –†–∞—Å—à–∏—Ä—è–µ–º —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
                    'sort_order': 'desc',
                    'limit': 15,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç
                    'party_request': True,  # –§–ª–∞–≥ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    'original_message': user_message
                }
        
        category = None
        for cat, keywords in clothing_keywords.items():
            if any(keyword in message_lower for keyword in keywords):
                category = cat
                break
        
        # –¶–≤–µ—Ç
        color = None
        color_keywords = {
            '—á–µ—Ä–Ω—ã–π': ['—á–µ—Ä–Ω—ã–π', '—á–µ—Ä–Ω–∞—è', '—á–µ—Ä–Ω—ã–µ', 'black'],
            '–±–µ–ª—ã–π': ['–±–µ–ª—ã–π', '–±–µ–ª–∞—è', '–±–µ–ª—ã–µ', 'white'],
            '–∫—Ä–∞—Å–Ω—ã–π': ['–∫—Ä–∞—Å–Ω—ã–π', '–∫—Ä–∞—Å–Ω–∞—è', '–∫—Ä–∞—Å–Ω—ã–µ', 'red'],
            '—Å–∏–Ω–∏–π': ['—Å–∏–Ω–∏–π', '—Å–∏–Ω—è—è', '—Å–∏–Ω–∏–µ', 'blue'],
            '–∑–µ–ª–µ–Ω—ã–π': ['–∑–µ–ª–µ–Ω—ã–π', '–∑–µ–ª–µ–Ω–∞—è', '–∑–µ–ª–µ–Ω—ã–µ', 'green'],
            '–∂–µ–ª—Ç—ã–π': ['–∂–µ–ª—Ç—ã–π', '–∂–µ–ª—Ç–∞—è', '–∂–µ–ª—Ç—ã–µ', 'yellow'],
            '—Å–µ—Ä—ã–π': ['—Å–µ—Ä—ã–π', '—Å–µ—Ä–∞—è', '—Å–µ—Ä—ã–µ', 'gray', 'grey'],
            '—Ä–æ–∑–æ–≤—ã–π': ['—Ä–æ–∑–æ–≤—ã–π', '—Ä–æ–∑–æ–≤–∞—è', '—Ä–æ–∑–æ–≤—ã–µ', 'pink'],
            '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π': ['—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π', '—Ñ–∏–æ–ª–µ—Ç–æ–≤–∞—è', '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–µ', 'purple'],
            '–æ—Ä–∞–Ω–∂–µ–≤—ã–π': ['–æ—Ä–∞–Ω–∂–µ–≤—ã–π', '–æ—Ä–∞–Ω–∂–µ–≤–∞—è', '–æ—Ä–∞–Ω–∂–µ–≤—ã–µ', 'orange']
        }
        
        for color_name, keywords in color_keywords.items():
            if any(keyword in message_lower for keyword in keywords):
                color = color_name
                break
        
        # –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
        price_range = None
        
        # –ò—â–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã —Ç–∏–ø–∞ "–æ—Ç X –¥–æ Y", "X-Y", "X-Y —Ç—ã—Å—è—á"
        range_patterns = [
            r'–æ—Ç\s*(\d+)\s*–¥–æ\s*(\d+)',
            r'(\d+)\s*-\s*(\d+)',
            r'(\d+)\s*–¥–æ\s*(\d+)',
            r'–¥–∏–∞–ø–∞–∑–æ–Ω\s*(\d+)\s*-\s*(\d+)',
            r'(\d+)\s*—Ç—ã—Å—è—á?\s*-\s*(\d+)\s*—Ç—ã—Å—è—á?',
            r'–æ—Ç\s*(\d+)\s*—Ç—ã—Å—è—á?\s*–¥–æ\s*(\d+)\s*—Ç—ã—Å—è—á?'
        ]
        
        for pattern in range_patterns:
            matches = re.findall(pattern, message_lower)
            if matches:
                min_val, max_val = matches[0]
                # –ï—Å–ª–∏ —á–∏—Å–ª–∞ –º–µ–Ω—å—à–µ 1000, —Å—á–∏—Ç–∞–µ–º –∏—Ö —Ç—ã—Å—è—á–∞–º–∏
                min_price = int(min_val) * 1000 if int(min_val) < 1000 else int(min_val)
                max_price = int(max_val) * 1000 if int(max_val) < 1000 else int(max_val)
                price_range = {'min': min_price, 'max': max_price}
                break
        
        # –ï—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø—Ä–æ—Å—Ç—ã–µ —É–∫–∞–∑–∞–Ω–∏—è
        if not price_range:
            if any(word in message_lower for word in ['–¥–µ—à–µ–≤—ã–µ', '–¥–µ—à–µ–≤–æ', '–Ω–µ–¥–æ—Ä–æ–≥–∏–µ', '–±—é–¥–∂–µ—Ç–Ω—ã–µ', '–¥–æ 10000']):
                price_range = {'min': 0, 'max': 10000}
            elif any(word in message_lower for word in ['–¥–æ—Ä–æ–≥–∏–µ', '–¥–æ—Ä–æ–≥–æ', '–ø—Ä–µ–º–∏—É–º', '–ª—é–∫—Å', '–æ—Ç 50000']):
                price_range = {'min': 50000, 'max': float('inf')}
            elif any(word in message_lower for word in ['—Å—Ä–µ–¥–Ω–∏–µ', '—Å—Ä–µ–¥–Ω–∏–π', '10000-30000']):
                price_range = {'min': 10000, 'max': 30000}
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        sort_order = 'desc'
        if any(word in message_lower for word in ['–¥–µ—à–µ–≤—ã–µ', '–¥–µ—à–µ–≤–æ', '–Ω–µ–¥–æ—Ä–æ–≥–∏–µ', '–±—é–¥–∂–µ—Ç–Ω—ã–µ']):
            sort_order = 'asc'
        elif any(word in message_lower for word in ['–¥–æ—Ä–æ–≥–∏–µ', '–¥–æ—Ä–æ–≥–æ', '–ø—Ä–µ–º–∏—É–º', '–ª—é–∫—Å']):
            sort_order = 'desc'
        
        # –õ–∏–º–∏—Ç
        limit = 10
        if '—Ç–æ–ø' in message_lower or 'top' in message_lower:
            numbers = re.findall(r'—Ç–æ–ø\s*(\d+)', message_lower)
            if numbers:
                limit = int(numbers[0])
            else:
                limit = 5
        elif any(word in message_lower for word in ['3', '—Ç—Ä–∏', 'three']):
            limit = 3
        elif any(word in message_lower for word in ['5', '–ø—è—Ç—å', 'five']):
            limit = 5
        
        # –°—Ç–∏–ª—å
        style = None
        style_keywords = {
            'casual': ['casual', '–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π', '–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è'],
            'business': ['business', '–¥–µ–ª–æ–≤–æ–π', '–¥–µ–ª–æ–≤–∞—è', '–æ—Ñ–∏—Å'],
            'sport': ['sport', '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π', '—Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è'],
            'elegant': ['elegant', '—ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π', '—ç–ª–µ–≥–∞–Ω—Ç–Ω–∞—è', '–≤–µ—á–µ—Ä–Ω–∏–π']
        }
        
        for style_name, keywords in style_keywords.items():
            if any(keyword in message_lower for keyword in keywords):
                style = style_name
                break
        
        return {
            'category': category,
            'color': color,
            'price_range': price_range,
            'sort_order': sort_order,
            'limit': limit,
            'style': style,
            'original_message': user_message
        }

    def _create_comprehensive_response(self, search_results: Dict[str, List[Item]], user_message: str, market_insights: Dict, preferences: Dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∂–∏–≤–æ–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–∞–∫ –æ—Ç –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞"""
        total_items = sum(len(items) for items in search_results.values() if items)
        
        if total_items == 0:
            return "–û–π, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞—à–ª–∞ —Ç–æ–≤–∞—Ä—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É üòî –ù–æ –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –ú–æ–∂–µ—Ç –±—ã—Ç—å, —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é? –Ø –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ!"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        main_items = search_results.get('main_results', [])
        
        # –°–æ–∑–¥–∞–µ–º –∂–∏–≤–æ–π –æ—Ç–≤–µ—Ç
        if main_items:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
            is_price_range = any(word in user_message.lower() for word in ['–¥–∏–∞–ø–∞–∑–æ–Ω', '–æ—Ç', '–¥–æ', '-', '—Ç—ã—Å—è—á'])
            is_specific_category = any(word in user_message.lower() for word in ['—Ñ—É—Ç–±–æ–ª–∫', '—Ä—É–±–∞—à–∫', '–¥–∂–∏–Ω—Å', '–ø–ª–∞—Ç—å', '–∫—É—Ä—Ç–∫'])
            
            if is_price_range:
                response = f"–û—Ç–ª–∏—á–Ω–æ! –í –≤–∞—à–µ–º —Ü–µ–Ω–æ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –Ω–∞—à–ª–∞ {len(main_items)} —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –ø–æ–¥–æ–π–¥—É—Ç –ø–æ–¥ –≤–∞—à –±—é–¥–∂–µ—Ç üòä\n\n"
            elif is_specific_category:
                response = f"–í–æ—Ç —á—Ç–æ –Ω–∞—à–ª–∞ –¥–ª—è –≤–∞—Å! {len(main_items)} –æ—Ç–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n\n"
            else:
                response = f"–°–º–æ—Ç—Ä–∏—Ç–µ, —á—Ç–æ –Ω–∞—à–ª–∞! {len(main_items)} –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –∂–∏–≤—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
            for i, item in enumerate(main_items[:5], 1):
                price_str = f"{item.price:,.0f} ‚Ç∏" if item.price else "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                color_info = f" –≤ —Ü–≤–µ—Ç–µ {item.color}" if item.color else ""
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∂–∏–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Ç–æ–≤–∞—Ä–∞–º
                if item.brand and item.brand.lower() in ['adidas', 'nike', 'fila']:
                    brand_comment = f" ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π –±—Ä–µ–Ω–¥ {item.brand}!"
                elif item.price and item.price < 5000:
                    brand_comment = " ‚Äî –æ—Ç–ª–∏—á–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ!"
                elif item.price and item.price > 10000:
                    brand_comment = " ‚Äî –ø—Ä–µ–º–∏—É–º –∫–∞—á–µ—Å—Ç–≤–æ!"
                else:
                    brand_comment = " ‚Äî —Å—Ç–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä!"
                
                response += f"{i}. {item.name}{color_info} –∑–∞ {price_str}{brand_comment}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if preferences.get('favorite_brands') and search_results.get('favorite_brands'):
                response += f"\n–ö—Å—Ç–∞—Ç–∏, –≤–∏–∂—É —á—Ç–æ –≤—ã –ª—é–±–∏—Ç–µ {preferences['favorite_brands'][0]}! –£ –Ω–∞—Å –µ—Å—Ç—å –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç —ç—Ç–æ–≥–æ –±—Ä–µ–Ω–¥–∞, –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üòâ"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–º–æ—â–∏
            response += f"\n\n–ß—Ç–æ –¥—É–º–∞–µ—Ç–µ –æ–± —ç—Ç–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö? –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –∏–ª–∏ –ø–æ–∏—Å–∫–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ! –ú–æ–∂–µ—Ç –±—ã—Ç—å, –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–æ–π —Ü–≤–µ—Ç –∏–ª–∏ —Ä–∞–∑–º–µ—Ä?"
            
            return response
        
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –ø–æ–∏—Å–∫–æ–º. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —è –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ! üòä"

    async def chat(self, db: Session, user_message: str, user_profile: ProfileOut = None, limit: int = 10) -> Dict[str, Any]:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–∏–∞–ª–æ–≥–∞"""
        logger.info(f"=== –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø ===")
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞: {self.conversation_state}")
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{user_message}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        if self.conversation_state == 'greeting':
            logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ: greeting")
            is_greeting = self._is_greeting(user_message)
            is_small_talk = self.is_small_talk(user_message)
            is_product_request = self._is_product_request(user_message)
            logger.info(f"is_greeting: {is_greeting}, is_small_talk: {is_small_talk}, is_product_request: {is_product_request}")
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ä–∞–∑—É –ø—Ä–æ—Å–∏—Ç —Ç–æ–≤–∞—Ä—ã - –ü–†–ò–û–†–ò–¢–ï–¢
            if is_product_request:
                logger.info("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤")
                self.conversation_state = 'searching_products'
                return await self._handle_style_request(db, user_message, user_profile, limit)
            # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–ª–∏ small talk
            elif is_greeting or is_small_talk:
                logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ/small talk")
                return await self._handle_greeting(user_message, user_profile)
            else:
                # –ï—Å–ª–∏ –Ω–µ—è—Å–Ω–æ, —á—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–º–æ—â—å
                logger.info("–ù–µ—è—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–º–æ—â—å")
                return await self._handle_greeting(user_message, user_profile)
        
        elif self.conversation_state == 'waiting_for_interest':
            logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ: waiting_for_interest")
            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–∞
            is_positive = self._is_positive_response(user_message)
            is_product_request = self._is_product_request(user_message)
            logger.info(f"is_positive: {is_positive}, is_product_request: {is_product_request}")
            
            if is_product_request:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ä–∞–∑—É –ø—Ä–æ—Å–∏—Ç —Ç–æ–≤–∞—Ä—ã - –ü–†–ò–û–†–ò–¢–ï–¢
                logger.info("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤")
                self.conversation_state = 'searching_products'
                return await self._handle_style_request(db, user_message, user_profile, limit)
            elif is_positive:
                logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")
                return await self._handle_interest_confirmation(user_message, user_profile)
            else:
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ—è—Å–Ω—ã–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–º–æ—â—å —Å–Ω–æ–≤–∞
                logger.info("–ù–µ—è—Å–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–º–æ—â—å —Å–Ω–æ–≤–∞")
                return await self._handle_greeting(user_message, user_profile)
        
        elif self.conversation_state == 'suggesting_options':
            logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ: suggesting_options")
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
            is_product_request = self._is_product_request(user_message)
            logger.info(f"is_product_request: {is_product_request}")
            
            if is_product_request:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ
                logger.info("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤")
                self.conversation_state = 'searching_products'
                return await self._handle_style_request(db, user_message, user_profile, limit)
            else:
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ—è—Å–Ω—ã–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–Ω–æ–≤–∞
                logger.info("–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–Ω–æ–≤–∞")
                return await self._suggest_options(user_message, user_profile)
        
        elif self.conversation_state == 'searching_products':
            logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ: searching_products")
            # –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
            is_greeting = self._is_greeting(user_message)
            logger.info(f"is_greeting: {is_greeting}")
            
            if is_greeting:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤–∞ –∑–¥–æ—Ä–æ–≤–∞–µ—Ç—Å—è, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤–∞ –∑–¥–æ—Ä–æ–≤–∞–µ—Ç—Å—è, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ")
                self.conversation_state = 'greeting'
                return await self._handle_greeting(user_message, user_profile)
            else:
                logger.info("–í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤")
                return await self._handle_style_request(db, user_message, user_profile, limit)
        
        else:
            # Fallback - –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
            logger.info(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {self.conversation_state}, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ")
            self.conversation_state = 'greeting'
            return await self._handle_greeting(user_message, user_profile)

    async def _handle_small_talk(self, user_message: str, user_profile: ProfileOut = None) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç small talk - —Ç–µ–ø–µ—Ä—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π –¥–∏–∞–ª–æ–≥–∞"""
        # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
        if self._is_greeting(user_message):
            return await self._handle_greeting(user_message, user_profile)
        
        # –ò–Ω–∞—á–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π small talk
        user_info = ""
        if user_profile:
            user_info = (
                f"\n–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                f"–†–æ—Å—Ç: {user_profile.height or '-'} —Å–º, –í–µ—Å: {user_profile.weight or '-'} –∫–≥, "
                f"–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏: {user_profile.chest or '-'} —Å–º, —Ç–∞–ª–∏–∏: {user_profile.waist or '-'} —Å–º, –±—ë–¥–µ—Ä: {user_profile.hips or '-'} —Å–º. "
                f"–õ—é–±–∏–º—ã–µ –±—Ä–µ–Ω–¥—ã: {', '.join(user_profile.favorite_brands) if user_profile.favorite_brands else '-'}; "
                f"–õ—é–±–∏–º—ã–µ —Ü–≤–µ—Ç–∞: {', '.join(user_profile.favorite_colors) if user_profile.favorite_colors else '-'}"
            )
        
        prompt = (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: '{user_message}'. "
            "–¢—ã ‚Äî –∂–∏–≤–æ–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç-—Å—Ç–∏–ª–∏—Å—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ –æ–¥–µ–∂–¥—ã. "
            "–¢—ã –æ–±—â–∞–µ—à—å—Å—è –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–ª–æ–≤–µ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —ç–º–æ–¥–∑–∏, —à—É—Ç–∏—à—å, –¥–∞–µ—à—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã. "
            "–¢—ã –Ω–µ —Ä–æ–±–æ—Ç, –∞ –Ω–∞—Å—Ç–æ—è—â–∏–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å—Ç–∏–ª—é, –∫–æ—Ç–æ—Ä—ã–π –ª—é–±–∏—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É –∏ —Ö–æ—á–µ—Ç –ø–æ–º–æ—á—å –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É. "
            "–û—Ç–≤–µ—á–∞–π —Ç–µ–ø–ª–æ, —Å —ç–Ω—Ç—É–∑–∏–∞–∑–º–æ–º, –ø—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–æ–º–æ—â—å. "
            "–ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å, –∫–∞–∫ –±—É–¥—Ç–æ –æ–±—â–∞–µ—à—å—Å—è —Å –¥—Ä—É–≥–æ–º."
            f"{user_info}\n"
            "–ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Ä–æ—Å—Ç, –≤–µ—Å, –æ–±—Ö–≤–∞—Ç—ã), –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á–∏—Ç—ã–≤–∞–π –∏—Ö –∏ –¥–∞–π —Å–æ–≤–µ—Ç –ø–æ —Ä–∞–∑–º–µ—Ä—É –æ–¥–µ–∂–¥—ã, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ."
            "–í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π —Ü–µ–Ω—ã –≤ —Ç–µ–Ω–≥–µ (‚Ç∏)."
        )
        
        try:
            response = await self.client.chat.completions.create(
                model=settings.AZURE_OPENAI_DEPLOYMENT_NAME,
                messages=[
                    {"role": "system", "content": "–¢—ã ‚Äî –∂–∏–≤–æ–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç-—Å—Ç–∏–ª–∏—Å—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ –æ–¥–µ–∂–¥—ã. –û–±—â–∞–µ—à—å—Å—è –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–ª–æ–≤–µ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —ç–º–æ–¥–∑–∏, –¥–∞–µ—à—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (**–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**), –Ω—É–º–µ—Ä–∞—Ü–∏—é (1. 2. 3.) –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã. –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º —Å —ç–º–æ–¥–∑–∏."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.8,
                max_tokens=500
            )
            answer = response.choices[0].message.content.strip()
                    return {"reply": answer, "items": []}
    except Exception as e:
        logger.error(f"StyleAgent Azure OpenAI error (small talk): {e}")
        return {"reply": "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –≤–∞—à –ò–ò-—Å—Ç–∏–ª–∏—Å—Ç –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑! üòä –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Å–µ–≥–æ–¥–Ω—è? –ú–æ–∂–µ—Ç –±—ã—Ç—å, –Ω–æ–≤—ã–µ —Ñ—É—Ç–±–æ–ª–∫–∏, —Å—Ç–∏–ª—å–Ω—ã–µ –¥–∂–∏–Ω—Å—ã –∏–ª–∏ —á—Ç–æ-—Ç–æ –¥–ª—è –æ—Å–æ–±–æ–≥–æ —Å–ª—É—á–∞—è?", "items": []}

    def _create_style_recommendation(self, items: List[Item], occasion: str, recommended_categories: List[str], user_message: str, user_profile: ProfileOut = None) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∏–ª–µ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–≤–æ–¥–∞"""
        
        # –°—Ç–∏–ª–µ–≤—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–≤–æ–¥–æ–≤
        style_advice = {
            '—à–∫–æ–ª–∞': {
                'title': 'üéì –û–±—Ä–∞–∑ –¥–ª—è —à–∫–æ–ª—ã/—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞',
                'description': '–ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –∏ —Å—Ç–∏–ª—å–Ω—ã–π –æ–±—Ä–∞–∑ –¥–ª—è —É—á–µ–±—ã',
                'tips': [
                    '–í—ã–±–∏—Ä–∞–π—Ç–µ —É–¥–æ–±–Ω—É—é –æ–±—É–≤—å –¥–ª—è –¥–æ–ª–≥–æ–≥–æ –¥–Ω—è',
                    '–°–ª–æ–∏—Å—Ç–∞—è –æ–¥–µ–∂–¥–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω—ã —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä',
                    '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –ª–µ–≥–∫–æ –∫–æ–º–±–∏–Ω–∏—Ä—É—é—Ç—Å—è'
                ]
            },
            '—Ä–∞–±–æ—Ç–∞': {
                'title': 'üíº –î–µ–ª–æ–≤–æ–π –æ–±—Ä–∞–∑ –¥–ª—è —Ä–∞–±–æ—Ç—ã',
                'description': '–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å',
                'tips': [
                    '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–∞ —Å–æ–∑–¥–∞—é—Ç —Å–µ—Ä—å–µ–∑–Ω—ã–π –æ–±—Ä–∞–∑',
                    '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤–∞–∂–Ω—ã –¥–ª—è –æ—Ñ–∏—Å–∞',
                    '–£–¥–æ–±–Ω–∞—è –æ–±—É–≤—å –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è'
                ]
            },
            '–≤–µ—á–µ—Ä–∏–Ω–∫–∞': {
                'title': 'üéâ –û–±—Ä–∞–∑ –¥–ª—è –≤–µ—á–µ—Ä–∏–Ω–∫–∏',
                'description': '–Ø—Ä–∫–∏–π –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–π—Å—è —Å—Ç–∏–ª—å',
                'tips': [
                    '–ù–µ –±–æ–π—Ç–µ—Å—å —è—Ä–∫–∏—Ö —Ü–≤–µ—Ç–æ–≤ –∏ –∞–∫—Ü–µ–Ω—Ç–æ–≤',
                    '–£–¥–æ–±–Ω–∞—è –æ–±—É–≤—å –¥–ª—è —Ç–∞–Ω—Ü–µ–≤',
                    '–î–æ–±–∞–≤—å—Ç–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏'
                ]
            },
            '–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π': {
                'title': 'üåü –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π –æ–±—Ä–∞–∑',
                'description': '–£–¥–æ–±–Ω—ã–π –∏ —Å—Ç–∏–ª—å–Ω—ã–π –¥–ª—è –∫–∞–∂–¥–æ–¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Å–∫–∏',
                'tips': [
                    '–ë–∞–∑–æ–≤—ã–µ –≤–µ—â–∏ –ª–µ–≥–∫–æ –∫–æ–º–±–∏–Ω–∏—Ä—É—é—Ç—Å—è',
                    '–£–¥–æ–±—Å—Ç–≤–æ –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ',
                    '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø—Ä–æ—Å–ª—É–∂–∞—Ç –¥–æ–ª—å—à–µ'
                ]
            },
            '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π': {
                'title': 'üèÉ‚Äç‚ôÄÔ∏è –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–∑',
                'description': '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
                'tips': [
                    '–î—ã—à–∞—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–∞',
                    '–£–¥–æ–±–Ω–∞—è –æ–±—É–≤—å –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
                    '–°–≤–æ–±–æ–¥–Ω—ã–π –∫—Ä–æ–π –Ω–µ —Å–∫–æ–≤—ã–≤–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏—è'
                ]
            }
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–≤–µ—Ç—ã –¥–ª—è –ø–æ–≤–æ–¥–∞
        advice = style_advice.get(occasion, style_advice['–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π'])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        if items:
            items_text = "\n".join([f"‚Ä¢ {item.name} - {item.price} ‚Ç∏" for item in items[:5]])
        else:
            items_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        user_info = ""
        if user_profile:
            if user_profile.favorite_colors:
                user_info += f"\nüé® –£—á–∏—Ç—ã–≤–∞—è –≤–∞—à–∏ –ª—é–±–∏–º—ã–µ —Ü–≤–µ—Ç–∞: {', '.join(user_profile.favorite_colors)}"
            if user_profile.favorite_brands:
                user_info += f"\nüè∑Ô∏è –ò –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –±—Ä–µ–Ω–¥—ã: {', '.join(user_profile.favorite_brands)}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = f"""
{advice['title']} ‚ú®

{advice['description']} üí´

üìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(recommended_categories)}
{user_info}

üí° –°—Ç–∏–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:
{chr(10).join([f"‚Ä¢ {tip}" for tip in advice['tips']])}

üõçÔ∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:
{items_text}

üéØ –•–æ—Ç–∏—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã –∏–ª–∏ —Ü–≤–µ—Ç–æ–≤—É—é –≥–∞–º–º—É?
"""
        
        return response.strip()

    async def _handle_style_request(self, db: Session, user_message: str, user_profile: ProfileOut = None, limit: int = 10) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –æ —Å—Ç–∏–ª–µ –∏ —Ç–æ–≤–∞—Ä–∞—Ö"""
        logger.info(f"_handle_style_request –≤—ã–∑–≤–∞–Ω —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º: '{user_message}'")
        
        try:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —É—Ç–æ—á–Ω–µ–Ω–∏–π —Ç–∏–ø–∞ "–¥–ª—è —à–∫–æ–ª—ã", "—à–∫–æ–ª—ã"
            message_lower = user_message.lower().strip()
            if len(message_lower) <= 20:
                occasion_keywords = {
                    '—à–∫–æ–ª': '—à–∫–æ–ª–∞', '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç': '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', '–∫–æ–ª–ª–µ–¥–∂': '–∫–æ–ª–ª–µ–¥–∂',
                    '—Ä–∞–±–æ—Ç–∞': '—Ä–∞–±–æ—Ç–∞', '—Ä–∞–±–æ—Ç—ã': '—Ä–∞–±–æ—Ç–∞', '–æ—Ñ–∏—Å': '–æ—Ñ–∏—Å', '–¥–µ–ª–æ–≤–æ–π': '–¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å', '–±–∏–∑–Ω–µ—Å': '–¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å',
                    '–≤–µ—á–µ—Ä–∏–Ω–∫': '–≤–µ—á–µ—Ä–∏–Ω–∫–∞', '–ø—Ä–∞–∑–¥–Ω–∏–∫': '–ø—Ä–∞–∑–¥–Ω–∏–∫', '—Ç–æ—Ä–∂–µ—Å—Ç–≤–æ': '—Ç–æ—Ä–∂–µ—Å—Ç–≤–æ',
                    '—Å–≤–∞–¥—å–±': '—Å–≤–∞–¥—å–±–∞', '–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è': '–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è',
                    '–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω': '–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π', '–∫–∞–∂–¥–æ–¥–Ω–µ–≤–Ω': '–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π', '–æ–±—ã—á–Ω': '–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π',
                    '–∫–ª–∞—Å—Å–∏–∫': '–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π', '—ç–ª–µ–≥–∞–Ω—Ç–Ω': '—ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π',
                    '—Å–ø–æ—Ä—Ç': '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π', '—Ñ–∏—Ç–Ω–µ—Å': '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫': '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π',
                    '–ø—Ä–æ–≥—É–ª–∫': '–ø—Ä–æ–≥—É–ª–∫–∞', '–æ—Ç–¥—ã—Ö': '–æ—Ç–¥—ã—Ö', '–æ—Ç–ø—É—Å–∫': '–æ—Ç–ø—É—Å–∫'
                }
                
                detected_occasion = None
                for keyword, occasion in occasion_keywords.items():
                    if keyword in message_lower:
                        detected_occasion = occasion
                        break
                
                if detected_occasion:
                    logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ–≤–æ–¥–∞: {detected_occasion}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–≤–æ–¥–∞
                    occasion_categories = {
                        '—à–∫–æ–ª–∞': ['—Ñ—É—Ç–±–æ–ª–∫–∞', '—Ä—É–±–∞—à–∫–∞', '–¥–∂–∏–Ω—Å—ã', '—Å–≤–∏—Ç–µ—Ä', '–∫—É—Ä—Ç–∫–∞', '–æ–±—É–≤—å'],
                        '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç': ['—Ñ—É—Ç–±–æ–ª–∫–∞', '—Ä—É–±–∞—à–∫–∞', '–¥–∂–∏–Ω—Å—ã', '—Å–≤–∏—Ç–µ—Ä', '–∫—É—Ä—Ç–∫–∞', '–æ–±—É–≤—å'],
                        '–∫–æ–ª–ª–µ–¥–∂': ['—Ñ—É—Ç–±–æ–ª–∫–∞', '—Ä—É–±–∞—à–∫–∞', '–¥–∂–∏–Ω—Å—ã', '—Å–≤–∏—Ç–µ—Ä', '–∫—É—Ä—Ç–∫–∞', '–æ–±—É–≤—å'],
                        '—Ä–∞–±–æ—Ç–∞': ['—Ä—É–±–∞—à–∫–∞', '–¥–∂–∏–Ω—Å—ã', '–ø–ª–∞—Ç—å–µ', '–∫—É—Ä—Ç–∫–∞', '–æ–±—É–≤—å'],
                        '–¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å': ['—Ä—É–±–∞—à–∫–∞', '–¥–∂–∏–Ω—Å—ã', '–ø–ª–∞—Ç—å–µ', '–∫—É—Ä—Ç–∫–∞', '–æ–±—É–≤—å'],
                        '–≤–µ—á–µ—Ä–∏–Ω–∫–∞': ['–ø–ª–∞—Ç—å–µ', '—Ä—É–±–∞—à–∫–∞', '–¥–∂–∏–Ω—Å—ã', '–∫—É—Ä—Ç–∫–∞', '–æ–±—É–≤—å'],
                        '–ø—Ä–∞–∑–¥–Ω–∏–∫': ['–ø–ª–∞—Ç—å–µ', '—Ä—É–±–∞—à–∫–∞', '–¥–∂–∏–Ω—Å—ã', '–∫—É—Ä—Ç–∫–∞', '–æ–±—É–≤—å'],
                        '—Ç–æ—Ä–∂–µ—Å—Ç–≤–æ': ['–ø–ª–∞—Ç—å–µ', '—Ä—É–±–∞—à–∫–∞', '–¥–∂–∏–Ω—Å—ã', '–∫—É—Ä—Ç–∫–∞', '–æ–±—É–≤—å'],
                        '—Å–≤–∞–¥—å–±–∞': ['–ø–ª–∞—Ç—å–µ', '—Ä—É–±–∞—à–∫–∞', '–¥–∂–∏–Ω—Å—ã', '–∫—É—Ä—Ç–∫–∞', '–æ–±—É–≤—å'],
                        '–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è': ['–ø–ª–∞—Ç—å–µ', '—Ä—É–±–∞—à–∫–∞', '–¥–∂–∏–Ω—Å—ã', '–∫—É—Ä—Ç–∫–∞', '–æ–±—É–≤—å'],
                        '–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π': ['—Ñ—É—Ç–±–æ–ª–∫–∞', '—Ä—É–±–∞—à–∫–∞', '–¥–∂–∏–Ω—Å—ã', '—Å–≤–∏—Ç–µ—Ä', '–∫—É—Ä—Ç–∫–∞', '–æ–±—É–≤—å'],
                        '–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π': ['—Ñ—É—Ç–±–æ–ª–∫–∞', '—Ä—É–±–∞—à–∫–∞', '–¥–∂–∏–Ω—Å—ã', '—Å–≤–∏—Ç–µ—Ä', '–∫—É—Ä—Ç–∫–∞', '–æ–±—É–≤—å'],
                        '—ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π': ['–ø–ª–∞—Ç—å–µ', '—Ä—É–±–∞—à–∫–∞', '–¥–∂–∏–Ω—Å—ã', '–∫—É—Ä—Ç–∫–∞', '–æ–±—É–≤—å'],
                        '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π': ['—Ñ—É—Ç–±–æ–ª–∫–∞', '—Å–≤–∏—Ç–µ—Ä', '—à–æ—Ä—Ç—ã', '–¥–∂–∏–Ω—Å—ã', '–æ–±—É–≤—å'],
                        '–ø—Ä–æ–≥—É–ª–∫–∞': ['—Ñ—É—Ç–±–æ–ª–∫–∞', '—Ä—É–±–∞—à–∫–∞', '–¥–∂–∏–Ω—Å—ã', '—Å–≤–∏—Ç–µ—Ä', '–∫—É—Ä—Ç–∫–∞', '–æ–±—É–≤—å'],
                        '–æ—Ç–¥—ã—Ö': ['—Ñ—É—Ç–±–æ–ª–∫–∞', '—Ä—É–±–∞—à–∫–∞', '–¥–∂–∏–Ω—Å—ã', '—Å–≤–∏—Ç–µ—Ä', '–∫—É—Ä—Ç–∫–∞', '–æ–±—É–≤—å'],
                        '–æ—Ç–ø—É—Å–∫': ['—Ñ—É—Ç–±–æ–ª–∫–∞', '—Ä—É–±–∞—à–∫–∞', '–¥–∂–∏–Ω—Å—ã', '—Å–≤–∏—Ç–µ—Ä', '–∫—É—Ä—Ç–∫–∞', '–æ–±—É–≤—å']
                    }
                    
                    recommended_categories = occasion_categories.get(detected_occasion, ['—Ñ—É—Ç–±–æ–ª–∫–∞', '—Ä—É–±–∞—à–∫–∞', '–¥–∂–∏–Ω—Å—ã', '–æ–±—É–≤—å'])
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—Ç–∏–ª–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    request_params = {
                        'style_request': True,
                        'occasion': detected_occasion,
                        'recommended_categories': recommended_categories,
                        'limit': 15,
                        'original_message': user_message
                    }
                else:
                    # –ü–∞—Ä—Å–∏–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –æ–±—ã—á–Ω–æ
                    request_params = self._parse_user_request(user_message)
            else:
                # –ü–∞—Ä—Å–∏–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –æ–±—ã—á–Ω–æ
                request_params = self._parse_user_request(user_message)
            
            user_limit = request_params.get('limit', limit)
            
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {user_message}")
            logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: {request_params}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Ä—ã–Ω–∫–∞
            market_insights = self._get_market_insights(db)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            preferences = self._analyze_user_preferences(db, user_profile)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —É–º–Ω—ã–µ –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î
            search_results = self._smart_search_with_direct_queries(db, user_message, user_profile, limit)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            total_items = sum(len(items) for items in search_results.values() if items)
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –¥–µ–ª–∞–µ–º fallback –ø–æ–∏—Å–∫
            if total_items == 0:
                logger.info("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –≤—ã–ø–æ–ª–Ω—è–µ–º fallback –ø–æ–∏—Å–∫")
                fallback_items = self._fallback_search(db, request_params, user_limit)
                search_results['main_results'] = fallback_items
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É—è –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            all_items = []
            
            # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if search_results.get('main_results'):
                all_items.extend(search_results['main_results'])
            
            # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            seen_ids = {item.id for item in all_items}
            for key, items in search_results.items():
                if key != 'main_results' and items:
                    for item in items:
                        if item.id not in seen_ids:
                            all_items.append(item)
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å—Ç–∏–ª–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            if request_params.get('style_request'):
                occasion = request_params.get('occasion', '–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π')
                recommended_categories = request_params.get('recommended_categories', [])
                
                # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–µ–≤–æ–π –æ—Ç–≤–µ—Ç
                style_response = self._create_style_recommendation(
                    all_items, occasion, recommended_categories, user_message, user_profile
                )
                
                return {
                    "reply": style_response,
                    "items": all_items[:limit],
                    "style_occasion": occasion,
                    "recommended_categories": recommended_categories
                }
                            seen_ids.add(item.id)
            
            # –°–æ–∑–¥–∞–µ–º –∂–∏–≤–æ–π –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é AI
            reply = await self._create_ai_response(search_results, user_message, market_insights, preferences)
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤–µ—á–µ—Ä–∏–Ω–æ–∫
            if request_params.get('party_request') and not all_items:
                logger.info("–î–ª—è –≤–µ—á–µ—Ä–∏–Ω–∫–∏ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç")
                reply = (
                    "–û–π, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞—à–ª–∞ —Ç–æ–≤–∞—Ä—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É üòî –ù–æ –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! "
                    "–î–ª—è –≤–µ—á–µ—Ä–∏–Ω–∫–∏ –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:\n\n"
                    "üéâ **–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ —Ñ—É—Ç–±–æ–ª–∫–∏** - –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã—Ö –≤–µ—á–µ—Ä–∏–Ω–æ–∫\n"
                    "üëî **–°—Ç–∏–ª—å–Ω—ã–µ —Ä—É–±–∞—à–∫–∏** - –ø–æ–¥–æ–π–¥—É—Ç –¥–ª—è –±–æ–ª–µ–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n"
                    "üëó **–õ—é–±—ã–µ –Ω–∞—Ä—è–¥–Ω—ã–µ –≤–µ—â–∏** - –≥–ª–∞–≤–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ!\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: '–ø–æ–∫–∞–∂–∏ —Ñ—É—Ç–±–æ–ª–∫–∏', '–Ω—É–∂–Ω—ã —Ä—É–±–∞—à–∫–∏' –∏–ª–∏ '—Å—Ç–∏–ª—å–Ω–∞—è –æ–¥–µ–∂–¥–∞'"
                )
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            final_items = all_items[:user_limit]
            
            logger.info(f"–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {len(final_items)} —Ç–æ–≤–∞—Ä–æ–≤")
            return {"reply": reply, "items": final_items}
            
        except Exception as e:
            logger.error(f"StyleAgent error in _handle_style_request: {e}")
            return {"reply": "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! üòÖ –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —è –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ. –ú–æ–∂–µ—Ç –±—ã—Ç—å, —Å—Ç–æ–∏—Ç —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å?", "items": []}

    async def _create_ai_response(self, search_results: Dict[str, List[Item]], user_message: str, market_insights: Dict, preferences: Dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç AI –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        if not self.client:
            logger.warning("OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –æ—Ç–≤–µ—Ç")
            return self._create_comprehensive_response(search_results, user_message, market_insights, preferences)
            
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
            items_info = []
            for category, items in search_results.items():
                if items:
                    category_items = []
                    for item in items[:3]:  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        category_items.append(f"‚Ä¢ {item.name} - {item.price} ‚Ç∏")
                    items_info.append(f"{category}:\n" + "\n".join(category_items))
            
            items_text = "\n\n".join(items_info) if items_info else "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
            prompt = f"""
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç: "{user_message}"

–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:
{items_text}

–°–æ–∑–¥–∞–π –û–ß–ï–ù–¨ –ö–†–ê–¢–ö–ò–ô –æ—Ç–≤–µ—Ç (–º–∞–∫—Å–∏–º—É–º 50-75 —Å–ª–æ–≤):
- 1 –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Ç–æ–≤–∞—Ä
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏
- –ó–∞–¥–∞–π 1 –≤–æ–ø—Ä–æ—Å –≤ –∫–æ–Ω—Ü–µ
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π markdown –∏–ª–∏ –Ω—É–º–µ—Ä–∞—Ü–∏—é
- –¢–æ–ª—å–∫–æ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ!

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –º–∞–∫—Å–∏–º—É–º 50-75 —Å–ª–æ–≤.
"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º timeout –∏ retry –ª–æ–≥–∏–∫—É
            import asyncio
            try:
                response = await asyncio.wait_for(
                    self.client.chat.completions.create(
                        model=settings.AZURE_OPENAI_DEPLOYMENT_NAME,
                        messages=[
                            {"role": "system", "content": "–¢—ã ‚Äî –æ—á–µ–Ω—å –∫—Ä–∞—Ç–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç-—Å—Ç–∏–ª–∏—Å—Ç. –û—Ç–≤–µ—á–∞–π –°–£–ü–ï–† –ö–†–ê–¢–ö–û (50-75 —Å–ª–æ–≤), –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π markdown –∏–ª–∏ –Ω—É–º–µ—Ä–∞—Ü–∏—é."},
                            {"role": "user", "content": prompt}
                        ],
                        temperature=0.8,
                        max_tokens=100
                    ),
                    timeout=10.0  # 10 —Å–µ–∫—É–Ω–¥ timeout
                )
                
                return response.choices[0].message.content.strip()
                
            except asyncio.TimeoutError:
                logger.warning("Timeout –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI API –≤ style_agent")
                return self._create_comprehensive_response(search_results, user_message, market_insights, preferences)
            except Exception as api_error:
                logger.error(f"–û—à–∏–±–∫–∞ OpenAI API –≤ style_agent: {api_error}")
                return self._create_comprehensive_response(search_results, user_message, market_insights, preferences)
                
        except Exception as e:
            logger.error(f"Error creating AI response: {e}")
            # Fallback –∫ –æ–±—ã—á–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É
            return self._create_comprehensive_response(search_results, user_message, market_insights, preferences)

    def _fallback_search(self, db: Session, request_params: Dict, limit: int) -> List[Item]:
        """Fallback –ø–æ–∏—Å–∫, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        query = db.query(Item)
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤–µ—á–µ—Ä–∏–Ω–æ–∫
        if request_params.get('party_request'):
            logger.info("Fallback –ø–æ–∏—Å–∫ –¥–ª—è –≤–µ—á–µ—Ä–∏–Ω–∫–∏ - –∏—â–µ–º —ç–ª–µ–≥–∞–Ω—Ç–Ω—É—é –æ–¥–µ–∂–¥—É")
            
            # –ò—â–µ–º —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –≤–µ—á–µ—Ä–∏–Ω–æ–∫
            party_keywords = ['–ø–ª–∞—Ç—å–µ', '—Ä—É–±–∞—à–∫–∞', '–∫–æ—Å—Ç—é–º', '—ç–ª–µ–≥–∞–Ω—Ç–Ω', '—Å—Ç–∏–ª—å–Ω', '–ø—Ä–µ–º–∏—É–º']
            party_conditions = []
            
            for keyword in party_keywords:
                party_conditions.append(Item.name.ilike(f"%{keyword}%"))
            
            if party_conditions:
                query = query.filter(or_(*party_conditions))
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ –¥–ª—è –≤–µ—á–µ—Ä–∏–Ω–æ–∫ (–±–æ–ª–µ–µ –¥–æ—Ä–æ–≥–∏–µ —Ç–æ–≤–∞—Ä—ã)
            if request_params.get('price_range'):
                price_range = request_params['price_range']
                if price_range.get('min') is not None:
                    query = query.filter(Item.price >= price_range['min'])
                if price_range.get('max') is not None and price_range['max'] != float('inf'):
                    query = query.filter(Item.price <= price_range['max'])
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ (–¥–æ—Ä–æ–≥–∏–µ —Å–Ω–∞—á–∞–ª–∞)
            query = query.order_by(Item.price.desc())
            
            result = query.limit(limit).all()
            logger.info(f"Fallback –ø–æ–∏—Å–∫ –¥–ª—è –≤–µ—á–µ—Ä–∏–Ω–∫–∏ –Ω–∞—à–µ–ª {len(result)} —Ç–æ–≤–∞—Ä–æ–≤")
            
            # –ï—Å–ª–∏ –¥–ª—è –≤–µ—á–µ—Ä–∏–Ω–∫–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—é–±—ã–µ —Ç–æ–≤–∞—Ä—ã
            if not result:
                logger.info("–î–ª—è –≤–µ—á–µ—Ä–∏–Ω–∫–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—é–±—ã–µ —Ç–æ–≤–∞—Ä—ã")
                query = db.query(Item)
                result = query.order_by(Item.price.desc()).limit(limit).all()
            
            return result
        
        # –û–±—ã—á–Ω—ã–π fallback –ø–æ–∏—Å–∫
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        if request_params.get('price_range'):
            price_range = request_params['price_range']
            logger.info(f"Fallback –ø–æ–∏—Å–∫ –ø–æ —Ü–µ–Ω–æ–≤–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É: {price_range}")
            
            if price_range.get('min') is not None:
                query = query.filter(Item.price >= price_range['min'])
            if price_range.get('max') is not None and price_range['max'] != float('inf'):
                query = query.filter(Item.price <= price_range['max'])
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
            if request_params.get('category'):
                category = request_params['category']
                query = query.filter(Item.name.ilike(f"%{category}%"))
                logger.info(f"Fallback –ø–æ–∏—Å–∫: –¥–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –∏—â–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        elif request_params.get('category'):
            category = request_params['category']
            query = query.filter(Item.name.ilike(f"%{category}%"))
            logger.info(f"Fallback –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π '{category}'")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ü–≤–µ—Ç, –∏—â–µ–º —Ç–æ–ª—å–∫–æ –ø–æ —Ü–≤–µ—Ç—É
        elif request_params.get('color'):
            color = request_params['color']
            query = query.filter(Item.color.ilike(f"%{color}%"))
            logger.info(f"Fallback –ø–æ–∏—Å–∫ –ø–æ —Ü–≤–µ—Ç—É '{color}'")
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
        else:
            logger.info("Fallback –ø–æ–∏—Å–∫: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã")
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        if request_params.get('sort_order') == 'asc':
            query = query.order_by(Item.price.asc())
        else:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Ü–µ–Ω—ã
            if request_params.get('price_range'):
                query = query.order_by(Item.price.asc())
            else:
                query = query.order_by(Item.price.desc())
        
        result = query.limit(limit).all()
        logger.info(f"Fallback –ø–æ–∏—Å–∫ –Ω–∞—à–µ–ª {len(result)} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        for item in result:
            logger.info(f"Fallback –Ω–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: {item.name} - {item.price} ‚Ç∏")
        
        return result

    async def recommend(self, db: Session, user_message: str, limit: int = 10, user_profile: ProfileOut = None) -> Dict[str, Any]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        return await self._handle_style_request(db, user_message, user_profile, limit)

    async def process(self, input_data: Dict[str, Any], context: ConversationContext) -> AgentResult:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –∞–≥–µ–Ω—Ç–æ–≤"""
        start_time = asyncio.get_event_loop().time()
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ input_data
            user_message = input_data.get('message', '')
            user_profile = input_data.get('user_profile')
            db = input_data.get('db')
            
            if not db:
                return AgentResult(
                    success=False,
                    error_message="–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                    data={'items': [], 'response': '–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}
                )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
            result = await self.handle_style_request(db, user_message, user_profile)
            
            processing_time = asyncio.get_event_loop().time() - start_time
            
            return AgentResult(
                success=True,
                data={
                    'items': result.get('items', []),
                    'response': result.get('reply', ''),
                    'search_performed': True,
                    'items_count': len(result.get('items', []))
                },
                processing_time=processing_time
            )
            
        except Exception as e:
            processing_time = asyncio.get_event_loop().time() - start_time
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ StyleAgent.process: {e}")
            
            return AgentResult(
                success=False,
                error_message=str(e),
                data={'items': [], 'response': '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤'},
                processing_time=processing_time
            )
    
    async def handle_style_request(self, db: Session, user_message: str, user_profile: ProfileOut = None, limit: int = 10) -> Dict[str, Any]:
        """–ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ —Å—Ç–∏–ª–µ –∏ —Ç–æ–≤–∞—Ä–∞—Ö"""
        return await self._handle_style_request(db, user_message, user_profile, limit)
    
    def reset_conversation(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        self.conversation_state = 'greeting'
        self.user_interests = []
        logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω–æ")

    def get_size_recommendation(self, height: float, weight: float, chest: float = None, waist: float = None, hips: float = None) -> List[str]:
        """–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç —Ä–∞–∑–º–µ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–µ–ª–∞"""
        recommendations = []
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø–æ —Ä–æ—Å—Ç—É –∏ –≤–µ—Å—É
        bmi = weight / ((height / 100) ** 2) if height and weight else None
        
        if height and weight:
            if height < 160:
                if bmi < 18.5:
                    recommendations.extend(['XS', 'S'])
                elif bmi < 25:
                    recommendations.extend(['S', 'M'])
                else:
                    recommendations.extend(['M', 'L'])
            elif height < 170:
                if bmi < 18.5:
                    recommendations.extend(['S', 'M'])
                elif bmi < 25:
                    recommendations.extend(['M', 'L'])
                else:
                    recommendations.extend(['L', 'XL'])
            elif height < 180:
                if bmi < 18.5:
                    recommendations.extend(['M', 'L'])
                elif bmi < 25:
                    recommendations.extend(['L', 'XL'])
                else:
                    recommendations.extend(['XL', 'XXL'])
            else:
                if bmi < 18.5:
                    recommendations.extend(['L', 'XL'])
                elif bmi < 25:
                    recommendations.extend(['XL', 'XXL'])
                else:
                    recommendations.extend(['XXL', 'XXXL'])
        
        return list(set(recommendations))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
