#!/usr/bin/env python3
"""
Test script for image generation service
"""

import asyncio
import os
import sys
from pathlib import Path

# Add the app directory to the Python path
sys.path.insert(0, str(Path(__file__).parent / "app"))

from services.image_generation import image_generation_service

async def test_image_generation():
    """Test image generation with sample data"""
    print("üß™ Testing Image Generation Service")
    print("=" * 50)
    
    # Sample product data
    sample_products = [
        {
            "name": "–ß–µ—Ä–Ω–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞",
            "brand": "Nike",
            "color": "—á–µ—Ä–Ω—ã–π",
            "category": "top",
            "description": "–•–ª–æ–ø–∫–æ–≤–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º",
            "image_url": "https://dummyimage.com/300x300/000000/ffffff.png&text=T-Shirt",
            "price": 2500
        },
        {
            "name": "–î–∂–∏–Ω—Å—ã —Å–∏–Ω–∏–µ",
            "brand": "Levi's",
            "color": "—Å–∏–Ω–∏–π",
            "category": "bottom",
            "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –¥–∂–∏–Ω—Å—ã –∏–∑ –¥–µ–Ω–∏–º–∞",
            "image_url": "https://dummyimage.com/300x300/0000ff/ffffff.png&text=Jeans",
            "price": 8000
        },
        {
            "name": "–ë–µ–ª—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏",
            "brand": "Adidas",
            "color": "–±–µ–ª—ã–π",
            "category": "footwear",
            "description": "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –∏–∑ –∫–æ–∂–∏",
            "image_url": "https://dummyimage.com/300x300/ffffff/000000.png&text=Sneakers",
            "price": 12000
        }
    ]
    
    # User measurements
    user_measurements = {
        "height": 180,
        "weight": 75
    }
    
    style_prompt = "casual streetwear, modern urban style"
    
    print(f"üì¶ –¢–æ–≤–∞—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
    for item in sample_products:
        print(f"  - {item['brand']} {item['name']} ({item['color']})")
    
    print(f"\nüë§ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    print(f"  - –†–æ—Å—Ç: {user_measurements['height']} —Å–º")
    print(f"  - –í–µ—Å: {user_measurements['weight']} –∫–≥")
    
    print(f"\nüé® –°—Ç–∏–ª—å: {style_prompt}")
    
    print(f"\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"  - Hugging Face API Key: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if os.getenv('HUGGINGFACE_API_KEY') else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"  - –ú–∞–Ω–µ–∫–µ–Ω: {'‚úÖ –ù–∞–π–¥–µ–Ω' if Path('frontend/public/maneken.jpg').exists() else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}")
    print(f"  - –ü–∞–ø–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {'‚úÖ –°–æ–∑–¥–∞–Ω–∞' if Path('uploads/generated_outfits').exists() else '‚ùå –ù–µ —Å–æ–∑–¥–∞–Ω–∞'}")
    
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
    
    try:
        # Generate image
        result_url = await image_generation_service.generate_outfit_image(
            product_items=sample_products,
            style_prompt=style_prompt,
            user_measurements=user_measurements
        )
        
        print(f"\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üì∑ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result_url}")
        
        # Check if file exists
        if result_url.startswith("/uploads/"):
            file_path = Path(result_url.lstrip("/"))
            if file_path.exists():
                file_size = file_path.stat().st_size
                print(f"üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
                print(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
            else:
                print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        else:
            print(f"üîó –í–Ω–µ—à–Ω–∏–π URL: {result_url}")
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_image_generation()) 