#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ StyleAgent —Å ConversationManager
"""

import asyncio
import sys
import os
from unittest.mock import Mock, AsyncMock

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

async def test_style_agent_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é StyleAgent —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –∞–≥–µ–Ω—Ç–æ–≤"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ StyleAgent...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã
        from app.agents.style_agent import StyleAgent
        from app.agents.base_agent import AgentResult, ConversationContext, UserContext
        
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π —É—Å–ø–µ—à–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä StyleAgent
        style_agent = StyleAgent()
        print("‚úÖ StyleAgent —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç BaseAgent
        from app.agents.base_agent import BaseAgent
        assert isinstance(style_agent, BaseAgent), "StyleAgent –¥–æ–ª–∂–µ–Ω –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å –æ—Ç BaseAgent"
        print("‚úÖ –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç BaseAgent –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        assert hasattr(style_agent, 'process'), "StyleAgent –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –º–µ—Ç–æ–¥ process()"
        assert hasattr(style_agent, 'handle_style_request'), "StyleAgent –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –º–µ—Ç–æ–¥ handle_style_request()"
        assert hasattr(style_agent, 'get_stats'), "StyleAgent –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –º–µ—Ç–æ–¥ get_stats()"
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        mock_input_data = {
            'message': '–ü–æ–∫–∞–∂–∏ —Ñ—É—Ç–±–æ–ª–∫–∏',
            'user_id': 1,
            'user_profile': None,
            'db': None  # –ë—É–¥–µ—Ç –º–æ–∫
        }
        
        mock_context = ConversationContext(
            user_context=UserContext(user_id=1),
            current_state='product_search'
        )
        
        print("‚úÖ –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ process() —Å –º–æ–∫ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        mock_db = Mock()
        mock_input_data['db'] = mock_db
        
        # –ú–æ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
        mock_items = [
            Mock(id=1, name="–§—É—Ç–±–æ–ª–∫–∞ Nike", price=5000, brand="Nike", color="–ß–µ—Ä–Ω—ã–π"),
            Mock(id=2, name="–§—É—Ç–±–æ–ª–∫–∞ Adidas", price=4500, brand="Adidas", color="–ë–µ–ª—ã–π")
        ]
        
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥ _handle_style_request
        style_agent._handle_style_request = AsyncMock(return_value={
            'items': mock_items,
            'reply': '–í–æ—Ç —á—Ç–æ –Ω–∞—à–ª–∞ –¥–ª—è –≤–∞—Å!'
        })
        
        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ process()
        result = await style_agent.process(mock_input_data, mock_context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert isinstance(result, AgentResult), "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å AgentResult"
        assert result.success, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º"
        assert 'items' in result.data, "–í –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–≤–∞—Ä—ã"
        assert 'response' in result.data, "–í –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–≤–µ—Ç"
        
        print("‚úÖ –ú–µ—Ç–æ–¥ process() —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ get_stats()
        stats = style_agent.get_stats()
        assert isinstance(stats, dict), "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º"
        assert 'requests_processed' in stats, "–í —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤"
        
        print("‚úÖ –ú–µ—Ç–æ–¥ get_stats() —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ handle_style_request()
        result = await style_agent.handle_style_request(mock_db, "–ü–æ–∫–∞–∂–∏ –¥–∂–∏–Ω—Å—ã")
        assert isinstance(result, dict), "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º"
        assert 'items' in result, "–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–≤–∞—Ä—ã"
        
        print("‚úÖ –ú–µ—Ç–æ–¥ handle_style_request() —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ StyleAgent –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()

async def test_conversation_manager_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å ConversationManager"""
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ConversationManager...")
    
    try:
        from app.agents.conversation_manager import ConversationManager
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        manager = ConversationManager()
        print("‚úÖ ConversationManager —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ StyleAgent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        assert hasattr(manager, 'style_agent'), "ConversationManager –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å style_agent"
        assert manager.style_agent is not None, "StyleAgent –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        
        print("‚úÖ StyleAgent –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ ConversationManager")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
        stats = manager.get_system_stats()
        assert 'agent_stats' in stats, "–í —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–æ–≤"
        assert 'style_agent' in stats['agent_stats'], "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ StyleAgent"
        
        print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ StyleAgent –¥–æ—Å—Ç—É–ø–Ω–∞")
        
        print("\nüéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ConversationManager —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ConversationManager: {e}")
        import traceback
        traceback.print_exc()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ StyleAgent")
    print("=" * 60)
    
    await test_style_agent_integration()
    await test_conversation_manager_integration()
    
    print("\n" + "=" * 60)
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main()) 